/**   
 * @Title: ViewController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.ModelAndViewResult;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.exception.ControllerException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.metadata.scope.MetaDataViewScope;
import com.gilight.dep.metadata.scope.MetaHbiernateScope;
import com.gilight.dep.metadata.service.IAnalyseQueryService;
import com.gilight.dep.metadata.service.IMetaDataViewService;
import com.gilight.dep.metadata.view.PackageBasicView;
import com.gilight.dep.metadata.view.PackageFolderBasicView;
import com.gilight.dep.metadata.web.request.MetadataRequestData;
import com.gilight.dep.metadata.web.request.ViewRequestData;
import com.gilight.dep.metadata.web.response.ResultCode;

@RequestMapping("/analyse")
public class AnalyseController extends MetadataBaseController {

	/**
	 * 视图服务层实例
	 */
	private IAnalyseQueryService analyseQueryService;

	public IAnalyseQueryService getAnalyseQueryService() {
		return analyseQueryService;
	}

	public void setAnalyseQueryService(IAnalyseQueryService analyseQueryService) {
		this.analyseQueryService = analyseQueryService;
	}

	/**
	 * 关联度分析
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:05:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/associateAnalysis", method = RequestMethod.POST)
	public @ResponseBody
	Object associateAnalysis(@ModelAttribute MetadataRequestData data)
			throws Exception {
		
		IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithID(data.getMetadataId());
		
		this.analyseQueryService.getRelationData(context);
		
		return context.getResponse().getResult();
	}

	/**
	 * 影响分析
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:05:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/impactAnalysis", method = RequestMethod.POST)
	public @ResponseBody
	Object impactAnalysis(@ModelAttribute MetadataRequestData data)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(data.getMdCode());
		
		this.analyseQueryService.getImpactAnalyse(context);
		
		return context.getResponse().getResult();
	}
	/**
	 * 血缘分析
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:05:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/strainAnalysis", method = RequestMethod.POST)
	public @ResponseBody
	Object strainAnalysis(@ModelAttribute MetadataRequestData data)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(data.getMdCode());
		
		this.analyseQueryService.getBloodAnalyse(context);
		
		return context.getResponse().getResult();
	}
	/**
	 * 全链分析
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:05:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/allAnalysis", method = RequestMethod.POST)
	public @ResponseBody
	Object allAnalysis(@ModelAttribute MetadataRequestData data)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(data.getMdCode());
		
		this.analyseQueryService.getAllAnalyse(context);
		return context.getResponse().getResult();
	}
}
