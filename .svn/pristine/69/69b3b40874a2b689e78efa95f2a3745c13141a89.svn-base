/**
 * @Title: MetamodelController.java
 * @Description: TODO
 * @author Rao junjun
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0
 */
package com.gilight.dep.metadata.web.controller;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.ModelAndViewResult;
import com.gilight.dep.framework.core.context.response.view.IView;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.controller.BaseController;
import com.gilight.dep.framework.core.exception.ControllerException;
import com.gilight.dep.framework.core.exception.param.ControllerParamInvalidException;
import com.gilight.dep.metadata.enmu.MetaModelDisplayType;
import com.gilight.dep.metadata.enmu.MetaModelYesOrNo;
import com.gilight.dep.metadata.scope.MetaModelScope;
import com.gilight.dep.metadata.view.MetaModelAttView;
import com.gilight.dep.metadata.view.MetaModelBasicView;
import com.gilight.dep.metadata.web.request.MetamodelRequestData;
import com.gilight.dep.metadata.web.response.ResultCode;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RequestMapping("/metamodelquery")
public class MetamodelQueryController extends BaseController {

    private IMetaModelQueryService metaModelQueryService;

    public IMetaModelQueryService getMetaModelQueryService() {
        return metaModelQueryService;
    }

    public void setMetaModelQueryService(
            IMetaModelQueryService metaModelQueryService) {
        this.metaModelQueryService = metaModelQueryService;
    }


    /**
     *
     * <p>
     * 检查view 参数<br>
     *
     * @throws ControllerException
     * @author YHY
     * @date 2015年7月22日 上午11:17:53
     * @version V1.0
     */
    protected void checkViewParameter(IView view)
            throws ControllerParamInvalidException {
        if (view == null) {
            throw new ControllerParamInvalidException("程序执行错误，传递参数不能为空。");
        }
    }

    /**
     * 继承关系元模型树的根获取
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findRootModel", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findRootModel
    (@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        IContext context = ContextFactoryImpl.getInstance()
                .createDifferResponseContextWithParams(null);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelBasicView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelBasicView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        List<Map<String, Object>> rootlist = new ArrayList<Map<String, Object>>();
                        List<MetaModelBasicView> resultList = (List<MetaModelBasicView>) result
                                .getResult();
                        for (MetaModelBasicView rootModel : resultList) {
                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("id", rootModel.getId());
                            map.put("code", rootModel.getCode());
                            map.put("name", rootModel.getName());
                            map.put("isabstract", rootModel.isIsabstract());
                            map.put("remark", rootModel.getRemark());
                            map.put("packageid", rootModel.getPackageid());
                            map.put("parentId", rootModel.getParentId());
                            map.put("status", rootModel.getStatus());
                            map.put("graphSvg", rootModel.getGraphSvg());
                            map.put("remark", rootModel.getRemark());
                            map.put("text", rootModel.getName());
                            map.put("leaf", false);
                            map.put("expanded", false);
                            map.put("nodeType", "inheritRoot");
                            map.put("treeType", "inherit");
                            rootlist.add(map);
                        }
                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取继承关系元模型根节点成功",
                                rootlist);
                    }
                });
        metaModelQueryService.findRootModel(context);
        return context.getResponse().getResult();
    }

    /**
     * 继承关系元模型树的子节点获取
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findNodeModel", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findNodeModel(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        String id = metamodelRequestData.getId();
        IContext context = ContextFactoryImpl.getInstance()
                .createDifferResponseContextWithID(id);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelBasicView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelBasicView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List<MetaModelBasicView> resultList = (List<MetaModelBasicView>) result
                                .getResult();
                        for (MetaModelBasicView nodeModel : resultList) {
                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("id", nodeModel.getId());
                            map.put("code", nodeModel.getCode());
                            map.put("name", nodeModel.getName());
                            map.put("isabstract", nodeModel.isIsabstract());
                            map.put("remark", nodeModel.getRemark());
                            map.put("packageid", nodeModel.getPackageid());
                            map.put("parentId", nodeModel.getParentId());
                            map.put("status", nodeModel.getStatus());
                            map.put("graphSvg", nodeModel.getGraphSvg());
                            map.put("remark", nodeModel.getRemark());
                            map.put("text", nodeModel.getName());
                            map.put("leaf", false);
                            map.put("expanded", false);
                            map.put("nodeType", "mModelNode");
                            map.put("treeType", "inherit");
                            nodelist.add(map);
                        }
                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取继承关系元模型树的子节点成功",
                                nodelist);
                    }
                });
        metaModelQueryService.findNodeModel(context);
        return context.getResponse().getResult();
    }


    /**
     * 组合关系元模型树的根获取
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findCompRootModel", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findCompRootModel
    (@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        IContext context = ContextFactoryImpl.getInstance()
                .createDifferResponseContextWithParams(null);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelBasicView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelBasicView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        List<Map<String, Object>> rootlist = new ArrayList<Map<String, Object>>();
                        List<MetaModelBasicView> resultList = (List<MetaModelBasicView>) result
                                .getResult();
                        for (MetaModelBasicView rootModel : resultList) {
                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("id", rootModel.getId());
                            map.put("code", rootModel.getCode());
                            map.put("name", rootModel.getName());
                            map.put("isabstract", rootModel.isIsabstract());
                            map.put("remark", rootModel.getRemark());
                            map.put("packageid", rootModel.getPackageid());
                            map.put("parentId", rootModel.getParentId());
                            map.put("status", rootModel.getStatus());
                            map.put("graphSvg", rootModel.getGraphSvg());
                            map.put("remark", rootModel.getRemark());
                            map.put("text", rootModel.getName());
                            map.put("leaf", false);
                            map.put("expanded", false);
                            map.put("nodeType", "mModelNode");
                            map.put("treeType", "composition");
                            rootlist.add(map);
                        }
                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取组合关系元模型根节点成功",
                                rootlist);
                    }
                });
        metaModelQueryService.findCompRootModel(context);
        return context.getResponse().getResult();
    }

    /**
     * 组合关系元模型树的子节点获取
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findCompNodeModel", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findCompNodeModel(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        String id = metamodelRequestData.getId();
        IContext context = ContextFactoryImpl.getInstance()
                .createDifferResponseContextWithID(id);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelBasicView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelBasicView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List<MetaModelBasicView> resultList = (List<MetaModelBasicView>) result
                                .getResult();
                        for (MetaModelBasicView nodeModel : resultList) {
                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("id", nodeModel.getId());
                            map.put("code", nodeModel.getCode());
                            map.put("name", nodeModel.getName());
                            map.put("isabstract", nodeModel.isIsabstract());
                            map.put("remark", nodeModel.getRemark());
                            map.put("packageid", nodeModel.getPackageid());
                            map.put("parentId", nodeModel.getParentId());
                            map.put("status", nodeModel.getStatus());
                            map.put("graphSvg", nodeModel.getGraphSvg());
                            map.put("remark", nodeModel.getRemark());
                            map.put("text", nodeModel.getName());
                            map.put("leaf", false);
                            map.put("expanded", false);
                            map.put("nodeType", "mModelNode");
                            map.put("treeType", "composition");
                            nodelist.add(map);
                        }
                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取组合关系元模型树的子节点成功",
                                nodelist);
                    }
                });
        metaModelQueryService.findCompNodeModel(context);
        return context.getResponse().getResult();
    }


    /**
     * 查询所有继承关系
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findInheList", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findInheList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
       // IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithEntity(null);
        IContext context = ContextFactoryImpl.getInstance().createContextWithEntity(null);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelAttView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelAttView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        //List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List resultList =  (List)result.getResult();

                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取元模型继承关系成功",
                                resultList);
                    }
                });
        metaModelQueryService.findInheList(context);
        System.out.println(context);
        return context.getResponse().getResult();
    }

    /**
     * 查询所有组合关系
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findCompList", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findCompList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        //IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithEntity(null);
        IContext context = ContextFactoryImpl.getInstance().createContextWithEntity(null);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelAttView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelAttView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        //List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List resultList =  (List)result.getResult();

                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取元模型组合关系成功",
                                resultList);
                    }
                });
        metaModelQueryService.findCompList(context);
        return context.getResponse().getResult();
    }

    /**
     * 查询所有依赖关系
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findDepeList", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findDepeList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithEntity(null);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelAttView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelAttView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        //List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List resultList =  (List)result.getResult();

                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取元模型依赖关系成功",
                                resultList);
                    }
                });
        metaModelQueryService.findDepeList(context);
        return context.getResponse().getResult();
    }

    /**
     * 根据id查询所有继承关系
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findAllMmInheritById", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findAllMmInheritById(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
    	String id = metamodelRequestData.getId();
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(id);
		metaModelQueryService.findAllMmInheritById(context);
		return context.getResponse().getResult();
    }

    /**
     * 查询模型依赖关系
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/findAllMmDependencyById", method = RequestMethod.GET)
    public
    @ResponseBody
    Object findAllMmDependencyById(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
    	String id = metamodelRequestData.getId();
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(id);
		metaModelQueryService.findAllMmDependencyById(context);
		return context.getResponse().getResult();
    }

    /**
	 * 查询模型组合关系
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/findAllMmCompositionById", method = RequestMethod.GET)
	public @ResponseBody
	Object findAllMmCompositionById(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		String id = metamodelRequestData.getId();
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(id);
		metaModelQueryService.findAllMmCompositionById(context);
		return context.getResponse().getResult();
	}

    /**
     *  根据id获取元模型属性集合信息
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/getModelAttrsByMid", method = RequestMethod.GET)
    public
    @ResponseBody
    Object getModelAttrsByMid(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        String id = metamodelRequestData.getId();
        IContext context = ContextFactoryImpl.getInstance()
                .createDifferResponseContextWithID(id);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelAttView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelAttView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List<MetaModelAttView> resultList = (List<MetaModelAttView>) result
                                .getResult();
                        for (MetaModelAttView nodeModel : resultList) {
                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("id", nodeModel.getId());
                            map.put("modelId", nodeModel.getModelId());
                            map.put("code", nodeModel.getCode());
                            map.put("name", nodeModel.getName());
                            map.put("datatypeId", nodeModel.getDatatypeId());
                            map.put("length", nodeModel.getLength());
                            map.put("max", nodeModel.getMax());
                            map.put("min", nodeModel.getMin());
                            map.put("isread", nodeModel.isIsread());
                            map.put("isnull", nodeModel.isIsnull());
                            map.put("isinherit", nodeModel.isIsinherit());
                            map.put("isshow", nodeModel.isIsshow());
                            map.put("iskey", nodeModel.isIskey());
                            map.put("remark", nodeModel.getRemark());
                            map.put("displayorder", nodeModel.getDisplayorder());
                            map.put("displayType", nodeModel.getDisplayType());
                            map.put("enumId", nodeModel.getEnumId());
                            nodelist.add(map);
                        }
                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取元模型属性信息集合成功",
                                nodelist);
                    }
                });
        metaModelQueryService.getModelAttrsByMid(context);
        return context.getResponse().getResult();
    }


    /**
     *  获取所有元模型
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-20 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/getAllModel", method = RequestMethod.GET)
    public @ResponseBody
    Object getAllModel(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {

        IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithEntity(null);
        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelAttView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelAttView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        //List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List resultList =  (List)result.getResult();

                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取元模型属性信息集合成功",
                                resultList);
                    }
                });
        metaModelQueryService.findAllModel(context);
        return context.getResponse().getResult();


    }

    /**
     * 根据条件检索元模型
     * <p>
     * <br>
     *
     * @param
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-7-14 下午6:06:11
     * @version V1.0
     */
    @RequestMapping(value = "/queryModelList", method = RequestMethod.POST)
    public
    @ResponseBody
    Object queryModelList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        MetaModelScope scope = new MetaModelScope();
        scope.setMmName(metamodelRequestData.getName());
        scope.setIsabstract(null);
        IContext context = ContextFactoryImpl.getInstance()
                .createDifferResponseContextWithParams(scope);

        context.getResponse().regiestResultHandler(
                new IResultHandler<List<MetaModelBasicView>>() {
                    @Override
                    public IResult<List<Map<String, Object>>> handle(
                            IContext context, IResult<List<MetaModelBasicView>> result)
                            throws IllegalAccessException,
                            InvocationTargetException {
                        List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
                        List<MetaModelBasicView> resultList = (List<MetaModelBasicView>) result
                                .getResult();
                        for (MetaModelBasicView nodeModel : resultList) {
                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("id", nodeModel.getId());
                            map.put("code", nodeModel.getCode());
                            map.put("name", nodeModel.getName());
                            map.put("isabstract", nodeModel.isIsabstract());
                            map.put("remark", nodeModel.getRemark());
                            map.put("packageid", nodeModel.getPackageid());
                            map.put("parentId", nodeModel.getParentId());
                            map.put("status", nodeModel.getStatus());
                            map.put("graphSvg", nodeModel.getGraphSvg());
                            map.put("remark", nodeModel.getRemark());
                            map.put("text", nodeModel.getName());
                            map.put("leaf", true);
                            map.put("expanded", false);
                            map.put("nodeType", "mModelNode");
                            nodelist.add(map);
                        }
                        return new ModelAndViewResult(
                                ResultCode.RESULT_CODE_SUCCESS, "获取根据条件检索元模型的查询结果成功",
                                nodelist);
                    }
                });


        this.metaModelQueryService.getByScope(context);
        return context.getResponse().getResult();
    }

    /**
     *  获取所有控件类型的枚举值
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-12-25 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/getAllDisplayType", method = RequestMethod.GET)
    public
    @ResponseBody
    Object getAllDisplayType(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        List<Map<String, String>> list = new ArrayList<Map<String, String>>();
        Map<String, String> map1 = new HashMap<String, String>();
        Map<String, String> map2 = new HashMap<String, String>();
        Map<String, String> map3 = new HashMap<String, String>();
        map1.put("id", MetaModelDisplayType.TEXT);
        map1.put("name", MetaModelDisplayType.TEXT_TYPE.getName());
        list.add(map1);
        map2.put("id", MetaModelDisplayType.TEXTAREA);
        map2.put("name", MetaModelDisplayType.TEXTAREA_TYPE.getName());
        list.add(map2);
        map3.put("id", MetaModelDisplayType.COMBOX);
        map3.put("name", MetaModelDisplayType.COMBOX_TYPE.getName());
        list.add(map3);
        return new ModelAndViewResult(
                ResultCode.RESULT_CODE_SUCCESS, "获取所有控件类型的枚举值成功",
                list);
    }

    /**
     *  获取所有选项为是否的下拉框枚举值
     * <p>
     * <br>
     *
     * @param metamodelRequestData
     * @return
     * @throws Exception
     * @author Administrator
     * @date 2015-12-25 下午3:18:31
     * @version V1.0
     */
    @RequestMapping(value = "/getYesOrNo", method = RequestMethod.GET)
    public
    @ResponseBody
    Object getYesOrNo(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        Map<String, Object> map1 = new HashMap<String, Object>();
        Map<String, Object> map2 = new HashMap<String, Object>();
        map1.put("id", true);
        map1.put("name", MetaModelYesOrNo.YES_TYPE.getName());
        list.add(map1);
        map2.put("id", false);
        map2.put("name", MetaModelYesOrNo.NO_TYPE.getName());
        list.add(map2);
        return new ModelAndViewResult(
                ResultCode.RESULT_CODE_SUCCESS, "获取所有选项为是否的下拉框枚举值成功",
                list);
    }


}
