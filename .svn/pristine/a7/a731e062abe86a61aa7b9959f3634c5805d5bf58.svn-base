/**   
 * @Title: VersionController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.ModelAndViewResult;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.metadata.service.IMetaDataVersionService;
import com.gilight.dep.metadata.view.MetaDataBasicView;
import com.gilight.dep.metadata.view.MetaDataBizFlowView;
import com.gilight.dep.metadata.web.request.MetadataRequestData;
import com.gilight.dep.metadata.web.request.VersionRequestData;
import com.gilight.dep.metadata.web.response.ResultCode;

@RequestMapping("/version")
public class VersionController {

	private IMetaDataVersionService metaDataVersionService;

	/**
	 * 根据元数据查询历史版本
	 * <p>
	 * <br>
	 * 
	 * @param VersionRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:05:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/queryByMDId", method = RequestMethod.POST)
	public @ResponseBody
	Object queryByMDId(@ModelAttribute VersionRequestData versionRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithID(versionRequestData.getMdCode());
		this.metaDataVersionService.getAllVerByMDID(context);
		return context.getResponse().getResult();		
	}

	public IMetaDataVersionService getMetaDataVersionService() {
		return metaDataVersionService;
	}

	public void setMetaDataVersionService(
			IMetaDataVersionService metaDataVersionService) {
		this.metaDataVersionService = metaDataVersionService;
	}
	
	/**
	 * 查询所有待审核的元数据
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/queryAuditingMD", method = RequestMethod.GET)
	public @ResponseBody
	Object queryAuditingMD(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		
		IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithParams(null);
		
		context.getResponse().regiestResultHandler(
				new IResultHandler<List<MetaDataBasicView>>() {
					@Override
					public IResult<List<Map>> handle(IContext context,
							IResult<List<MetaDataBasicView>> result)
							throws IllegalAccessException,
							InvocationTargetException {

						List<Map> list = new ArrayList<Map>();
						for (MetaDataBasicView md : result.getResult()) {
							Map map = new HashMap();
							map.put("id", md.getId());
							map.put("text", md.getMdName()+" ("+md.getUserver()+")");
							map.put("leaf", true);
							map.put("expanded", true);
							map.put("nodeType", 2);
							map.put("cacheData", md);
							list.add(map);
						}
						return new ModelAndViewResult(
								ResultCode.RESULT_CODE_SUCCESS, "获取成功", list);
					}
				});		
		
		this.metaDataVersionService.getAuditingMD(context);
		return context.getResponse().getResult();		
		
	}
	
	
	/**
	 * 审核元数据
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/auditingMD", method = RequestMethod.POST)
	public @ResponseBody
	Object auditingMD(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		boolean flag = metadataRequestData.isFlag();
		MetaDataBizFlowView view = new MetaDataBizFlowView();
		view.setComment(metadataRequestData.getRemark());
		view.setMdId(metadataRequestData.getMetadataId());
		IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithView(view);
		if(flag){  //审核通过
			this.metaDataVersionService.approveAgree(context);
		}else {  //审核不通过
			this.metaDataVersionService.approveReject(context);

		}
		return context.getResponse().getResult();
		
	}
	
	/**
	 * 发布元数据
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/pub", method = RequestMethod.POST)
	public @ResponseBody
	Object pub(@ModelAttribute MetaDataBasicView view)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance().createDifferResponseContextWithView(view);
		this.metaDataVersionService.publishVer(context);
		return context.getResponse().getResult();
	}

	
	
}
