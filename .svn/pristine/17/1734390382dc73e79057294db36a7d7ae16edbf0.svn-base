package com.gilight.dep.metadata.repository.impl;

import java.util.List;

import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.impl.EntityParameters;
import com.gilight.dep.framework.core.context.request.parameter.impl.IDParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.exception.DaoException;
import com.gilight.dep.framework.core.exception.RepositoryException;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.metadata.dao.IMetaModelAssoDao;
import com.gilight.dep.metadata.entity.MmMetamodel;
import com.gilight.dep.metadata.repository.IMetaModelAssoRepository;

public class MetaModelAssoRepositoryImpl implements IMetaModelAssoRepository {

	public IMetaModelAssoDao metaModelAssoDao;
	
	
	

	

	public IMetaModelAssoDao getMetaModelAssoDao() {
		return metaModelAssoDao;
	}

	public void setMetaModelAssoDao(IMetaModelAssoDao metaModelAssoDao) {
		this.metaModelAssoDao = metaModelAssoDao;
	}


	@Override
	public IResponse create(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
			//paramIContext.getRequest()create(paramIContext)
				EntityParameters<IEntity> entityParameters = (EntityParameters) paramIContext.getParameters();
				IEntity mme=(IEntity)entityParameters.getEntity();
			//metaModelBasicDao.save(paramIEntity);
			
				metaModelAssoDao.save(mme);
			} catch (DaoException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				new RepositoryException("创建元模型失败!-dao");
			}
			
			return paramIContext.getResponse();
	}

	@Override
	public IResponse update(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
			EntityParameters<IEntity> entityParameters = (EntityParameters) paramIContext.getParameters();
			IEntity mme=(IEntity)entityParameters.getEntity();
			//metaModelBasicDao.save(paramIEntity);
		
			metaModelAssoDao.update(mme);
			paramIContext.getResponse().setResult(ResultFactory.getInstance().createSuccessResult(null));
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("更新元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}

	@Override
	public IResponse delete(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
				EntityParameters<IEntity> entityParameters = (EntityParameters) paramIContext.getParameters();
				IEntity mme=(IEntity)entityParameters.getEntity();
			//metaModelBasicDao.save(paramIEntity);
			
				metaModelAssoDao.delete(mme);
			} catch (DaoException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				new RepositoryException("删除元模型失败!-dao");
			}
			
		return paramIContext.getResponse();
	}

	 

	@Override
	public IResponse getById(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IDParameters idp = (IDParameters) paramIContext.getParameters();
			//EntityParameters mme=(MmMetamodel)entityParameters.getEntity();
			String id = idp.getId();
			//metaModelBasicDao.getById(mme.getId(),MmMetamodel.class);
			MmMetamodel mme=(MmMetamodel) metaModelAssoDao.findById(id,MmMetamodel.class);
			paramIContext.getResponse().setResult(ResultFactory.getInstance().createSuccessResult(mme));
			
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("查询元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}

	@Override
	public IResponse getByScope(IContext paramIContext)
			throws RepositoryException {
		// TODO Auto-generated method stub
		return null;
	}

}
