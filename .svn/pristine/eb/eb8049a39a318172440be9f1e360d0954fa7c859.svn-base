package com.gilight.dep.metadata.analyzer.offline;

import java.util.List;

import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.metadata.entity.MmComposition;
import com.gilight.dep.metadata.entity.MmDependency;
import com.gilight.dep.metadata.entity.MmInherit;
import com.gilight.dep.metadata.entity.MmMetamodel;

/**
 * 
* @ClassName: IAnalyzer 
* <p>TODO基类<br>
* @author wzx
* @date 2015年8月3日 下午5:29:23
* @version V1.0
* @since JDK 1.6
 */
public interface IAnalyzer {
	/**
	 * 根据元模型ID获取包括元模型在内的所有子元模型
	* <p><br>
	* @param id
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:41:05
	* @version V1.0
	 */
	public List<String> getSubModelId(String id)  throws ServiceException ;
	
	/**
	 * 根据元模型ID获取包括元模型在内的所有子元模型
	* <p><br>
	* @param id
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:42:03
	* @version V1.0
	 */
	public List<MmMetamodel> getSubModel(String id) throws ServiceException;
	/**
	 * 根据code获取元模型
	* <p><br>
	* @param id
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:43:46
	* @version V1.0
	 */
	public MmMetamodel getModelByCode(String code)throws ServiceException;
	
	/**
	 * 根据id获取元模型
	* <p><br>
	* @param id
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:43:46
	* @version V1.0
	 */
	public MmMetamodel getModelByid(String id)throws ServiceException;
	
	/**
	 * 根据code获取元模型id
	* <p><br>
	* @param id
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:43:46
	* @version V1.0
	 */
	public String getModelIdByCode(String code) throws ServiceException;
	/**
	 * 根据元模型id获取继承关系
	* <p><br>
	* @param id
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:46:20
	* @version V1.0
	 */
	public List<MmInherit> getMmInheritByfromid(String fromid) throws ServiceException;
	/**
	 * 根据元模型code获取继承关系
	* <p><br>
	* @param code
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:46:52
	* @version V1.0
	 */
	public List<MmInherit> getMmInheritByCode(String code) throws ServiceException;
	/**
	 * 根据元模型id获取继承关系
	* <p><br>
	* @param fromid
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:47:37
	* @version V1.0
	 */
	public List<MmComposition> getMmCompositionByfromid(String fromid) throws ServiceException;
	
	/**
	 * 根据元模型id获取依赖关系
	* <p><br>
	* @param fromid
	* @return  
	* @author wzx
	* @date 2015年8月3日 下午5:47:37
	* @version V1.0
	 */
	public List<MmDependency> getMmDependencyByfromid(String fromid) throws ServiceException;
	/**
	 * 根据code查询元模型子类id
	* <p><br>
	* @param code
	* @return
	* @throws ServiceException  
	* @author wzx
	* @date 2015年8月3日 下午6:06:38
	* @version V1.0
	 */
	public List<String> getSubModelIdByCode(String code) throws ServiceException;
	
	
}
