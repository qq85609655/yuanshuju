/**   
 * @Title: MetamodelController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.metadata.scope.MetaHbiernateScope;
import com.gilight.dep.metadata.scope.MetaModelScope;
import com.gilight.dep.metadata.web.request.MetadataRequestData;
import com.gilight.dep.metadata.web.request.MetamodelRequestData;
import com.gilight.dep.metadata.web.response.ResponseResult;
import com.gilight.dep.metadata.web.response.ResultCode;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;
import com.gilight.dep.metamodel.service.IMetaModelService;

@RequestMapping("/metamodel")
public class MetamodelController {

	private IMetaModelQueryService metaModelQueryService;

	/**
	 * 根据模型Id获取元模型中定义的属性
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/getProps", method = RequestMethod.POST)
	public @ResponseBody
	Object getProps(@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl
				.getInstance()
				.createDifferResponseContextWithID(metamodelRequestData.getId());
		this.metaModelQueryService.getModelAttrsByMid(context);
		return context.getResponse().getResult();
	}

	/**
	 * 获取所有的模型列表
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/getList", method = RequestMethod.POST)
	public @ResponseBody
	Object getList(@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		MetaModelScope scope = new MetaModelScope();
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(scope);
		this.metaModelQueryService.getByScope(context);
		return context.getResponse().getResult();
	}

	/**
	 * 获取所有元模型
	 * <p>
	 * <br>
	 * 
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/getAll", method = RequestMethod.POST)
	public @ResponseBody
	Object getAll() throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(null);
		this.metaModelQueryService.getAllModels(context);
		return context.getResponse().getResult();
	}

	/**
	 * 根据模型ID获取子模型列表
	 * <p>
	 * <br>
	 * 
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-22 下午6:27:17
	 * @version V1.0
	 */
	@RequestMapping(value = "/getChildrens", method = RequestMethod.POST)
	public @ResponseBody
	Object getChildrens(
			@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl
				.getInstance()
				.createDifferResponseContextWithID(metamodelRequestData.getId());
		this.metaModelQueryService.getChildModels(context);
		return context.getResponse().getResult();
	}

	/**
	 * 根据元模型Id查询定义好的依赖元模型
	 * <p>
	 * <br>
	 * 
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-22 下午6:27:17
	 * @version V1.0
	 */
	@RequestMapping(value = "/getDependMM", method = RequestMethod.POST)
	public @ResponseBody
	Object getDependMM(@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl
				.getInstance()
				.createDifferResponseContextWithID(metamodelRequestData.getId());
		this.metaModelQueryService.getDepeAsso(context);
		return context.getResponse().getResult();
	}

	public IMetaModelQueryService getMetaModelQueryService() {
		return metaModelQueryService;
	}

	public void setMetaModelQueryService(
			IMetaModelQueryService metaModelQueryService) {
		this.metaModelQueryService = metaModelQueryService;
	}

}
