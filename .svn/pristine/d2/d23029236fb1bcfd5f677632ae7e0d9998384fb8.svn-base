/**
 * 登录登出
 */
package com.gilight.dep.metadata.web.controller;

import com.datastax.driver.core.exceptions.UnauthorizedException;
import com.gilight.dep.framework.util.string.StringUtil;
import com.gilight.dep.metadata.entity.UserEntity;
import com.gilight.dep.metadata.web.util.SessionManager;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.subject.Subject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


@Controller
@RequestMapping("/auth")
public class AuthLoginController extends MetadataBaseController {

	/**
	 * 
	 * @Description: 登入
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/admin/login", method = RequestMethod.POST)
	public void login(@RequestParam String loginName, @RequestParam String password,
			HttpServletRequest req, HttpServletResponse resp) throws Exception {

		HttpSession session = req.getSession();
		
		/*UserEntity userEntity = new UserEntity();
		userEntity.setLoginName(loginName);
		userEntity.setPassword(password);


		session.setAttribute("SESSION_CURRENT_USER", userEntity);
		String contextPath = req.getContextPath();
		resp.sendRedirect(contextPath + "/index.jsp");
		session.setAttribute("ERROR_MSG", null);*/



		String msg = "";
		String userName = loginName;
		//String password = password;
		System.out.println(userName);
		System.out.println(password);
		UsernamePasswordToken token = new UsernamePasswordToken(userName, password);
		token.setRememberMe(true);
		Subject subject = SecurityUtils.getSubject();
		try {
			subject.login(token);
			if (subject.isAuthenticated()) {
				String contextPath = req.getContextPath();
				resp.sendRedirect(contextPath + "/index.jsp");
			} else {
				session.setAttribute("ERROR_MSG", null);
			}
		} catch (IncorrectCredentialsException e) {
			msg = "登录密码错误. Password for account " + token.getPrincipal() + " was incorrect.";
			//model.addAttribute("message", msg);			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		} catch (ExcessiveAttemptsException e) {
			msg = "登录失败次数过多";
			//model.addAttribute("message", msg);
			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		} catch (LockedAccountException e) {
			msg = "帐号已被锁定. The account for username " + token.getPrincipal() + " was locked.";
			//model.addAttribute("message", msg);
			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		} catch (DisabledAccountException e) {
			msg = "帐号已被禁用. The account for username " + token.getPrincipal() + " was disabled.";
			//model.addAttribute("message", msg);
			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		} catch (ExpiredCredentialsException e) {
			msg = "帐号已过期. the account for username " + token.getPrincipal() + "  was expired.";
			//model.addAttribute("message", msg);
			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		} catch (UnknownAccountException e) {
			msg = "帐号不存在. There is no user with username of " + token.getPrincipal();
			//model.addAttribute("message", msg);
			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		} catch (UnauthorizedException e) {
			msg = "您没有得到相应的授权！" + e.getMessage();
			//model.addAttribute("message", msg);
			System.out.println(msg);
			SessionManager.removeSession(loginName);
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			session.setAttribute("ERROR_MSG", msg);
			resp.sendRedirect(contextPath + "/login.jsp");
		}

		/*if ("haut@metadata@201766".equals(password)&&"admin".equals(loginName)){
			session.setAttribute("SESSION_CURRENT_USER", userEntity);
			String contextPath = req.getContextPath();
			resp.sendRedirect(contextPath + "/index.jsp");
			session.setAttribute("ERROR_MSG", null);
		}else {
			SessionManager.removeSession(userEntity.getLoginName());
			session.setAttribute("SESSION_CURRENT_USER", null);
			String contextPath = req.getContextPath();
			resp.sendRedirect(contextPath + "/login.jsp");
			session.setAttribute("ERROR_MSG", "用户名或密码错误");
		}*/

		
	}


	/**
	 * 
	 * @Description: 登出
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/admin/logout", method = RequestMethod.GET)
	public void logout(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		
		HttpSession session = req.getSession();
	    
	    UserEntity user = (UserEntity)session.getAttribute("SESSION_CURRENT_USER");
		session.setAttribute("ERROR_MSG", "");
	    session.removeAttribute("SESSION_CURRENT_USER");
		session.invalidate();
	    if ((user != null) && (StringUtil.isEmpty(user.getLoginName()))) {
	      SessionManager.removeSession(user.getLoginName());
	    }
	    String contextPath = req.getContextPath();
	    resp.sendRedirect(contextPath + "/login.jsp");
	}

}
