package com.gilight.dep.metamodel.service.impl;

import org.apache.log4j.Logger;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.impl.EntityParameters;
import com.gilight.dep.framework.core.context.request.parameter.impl.IDParameters;
import com.gilight.dep.framework.core.context.request.parameter.impl.ViewParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.exception.GilightException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.metadata.entity.MmInherit;
import com.gilight.dep.metadata.repository.IMetaModelInheRepository;
import com.gilight.dep.metadata.util.AutoSetCode;
import com.gilight.dep.metadata.view.MetaModelInheritView;
import com.gilight.dep.metamodel.service.IMetaModelInheService;

public class MetaModelInheServiceImpl implements IMetaModelInheService {
	private static final Logger logger = Logger
			.getLogger(MetaModelInheServiceImpl.class);

	private IMetaModelInheRepository metaModelInheRepository;

	public IMetaModelInheRepository getMetaModelInheRepository() {
		return metaModelInheRepository;
	}

	public void setMetaModelInheRepository(
			IMetaModelInheRepository metaModelInheRepository) {
		this.metaModelInheRepository = metaModelInheRepository;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// AutoSetCode.autoCode( MmMetamodel.class,
		// "mme",MetaModelBasicView.class,"mmv");

		AutoSetCode.autoCode(MetaModelInheritView.class, "mmv",
				MmInherit.class, "mme");

		/*
		 * MmInherit mme=(MmInherit) paramIContext.getResponse().getResult();
		 * 
		 * MetaModelInheritView mmv =new MetaModelInheritView();
		 */
	}

	private MmInherit view2Entity(MmInherit mme, MetaModelInheritView mmv) {
		mme.setId(mmv.getId());
		mme.setMmId(mmv.getMmId());
		mme.setParentId(mmv.getParentId());
		mme.setRemark(mmv.getRemark());
		mme.setUpdateDate(mmv.getUpdateDate());
		return mme;

	}

	@Override
	public IResponse update(IContext paramIContext) throws ServiceException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
			// IServiceParameter isp = (IServiceParameter)
			// paramIContext.getParameters();
			ViewParameters vp = (ViewParameters) paramIContext.getParameters();
			EntityParameters<IEntity> ep = new EntityParameters();
			MetaModelInheritView mmv = (MetaModelInheritView) vp.getView();
			MmInherit mme = new MmInherit();
			mme = view2Entity(mme, mmv);
			ep.setEntity(mme);
			paramIContext.setParameters(ep);
			IContext context = ContextFactoryImpl.getInstance()
					.createContextWithEntity(paramIContext, mme);
			return metaModelInheRepository.update(paramIContext);
		} catch (GilightException e) {
			logger.error("添加元模型失败!", e);
			throw new ServiceException("添加元模型失败!");

		}
	}

	@Override
	public IResponse delete(IContext paramIContext) throws ServiceException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
			ViewParameters vp = (ViewParameters) paramIContext.getParameters();
			EntityParameters<IEntity> ep = new EntityParameters();
			MetaModelInheritView mmv = (MetaModelInheritView) vp.getView();
			MmInherit mme = new MmInherit();
			mme = view2Entity(mme, mmv);
			ep.setEntity(mme);
			paramIContext.setParameters(ep);
			IContext context = ContextFactoryImpl.getInstance()
					.createContextWithEntity(paramIContext, mme);
			return metaModelInheRepository.delete(paramIContext);
		} catch (GilightException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException("添加元模型失败!");

		}
	}

	@Override
	public IResponse create(IContext paramIContext) throws ServiceException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
			ViewParameters vp = (ViewParameters) paramIContext.getParameters();
			EntityParameters<IEntity> ep = new EntityParameters();
			MetaModelInheritView mmv = (MetaModelInheritView) vp.getView();
			MmInherit mme = new MmInherit();
			mme = view2Entity(mme, mmv);
			ep.setEntity(mme);
			paramIContext.setParameters(ep);
			IContext context = ContextFactoryImpl.getInstance()
					.createContextWithEntity(paramIContext, mme);
			return metaModelInheRepository.create(paramIContext);
		} catch (GilightException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException("添加元模型失败!");

		}
	}

	
	
	@Override
	public IResponse getById(IContext paramIContext) throws ServiceException {
		// TODO Auto-generated method stub
		try {
			// TODO Auto-generated method stub
			IContext context;
			IDParameters ids = (IDParameters) paramIContext.getParameters();

			context = ContextFactoryImpl.getInstance().createContextWithParams(
					paramIContext, ids);
			// context.getResponse().regiestResultHandler(new ResultHandler());
			// 设置回调
			context.getResponse().regiestResultHandler(
					new IResultHandler<String>() {
						@Override
						public IResult<Object> handle(IContext context,
								IResult<String> result) throws Exception {

							IContext paramIContext = (IContext) metaModelInheRepository
									.getById(context);
							MmInherit mme = (MmInherit) paramIContext
									.getResponse().getResult();

							MetaModelInheritView mmv = new MetaModelInheritView();

							mmv.setId(mme.getId());
							mmv.setMmId(mme.getMmId());
							mmv.setParentId(mme.getParentId());
							mmv.setRemark(mme.getRemark());
							mmv.setUpdateDate(mme.getUpdateDate());

							// mmv.setAttList(attList);

							return ResultFactory.getInstance()
									.createSuccessResult(mmv);
						}
					});
			// return context.getResponse();
			return metaModelInheRepository.getById(context);
		} catch (GilightException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException("查询元模型失败!");
		}
	}

}
