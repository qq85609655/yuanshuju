/**   
 * @Title: ViewController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.ModelAndViewResult;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.exception.ControllerException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.util.string.StringUtil;
import com.gilight.dep.metadata.enmu.MetaDataViewType;
import com.gilight.dep.metadata.scope.MetaDataViewScope;
import com.gilight.dep.metadata.scope.MetaHbiernateScope;
import com.gilight.dep.metadata.service.IMetaDataViewService;
import com.gilight.dep.metadata.view.PackageBasicView;
import com.gilight.dep.metadata.view.PackageFolderBasicView;
import com.gilight.dep.metadata.web.request.ViewRequestData;
import com.gilight.dep.metadata.web.response.ResultCode;

@RequestMapping("/view")
public class ViewController extends MetadataBaseController {

	/**
	 * 视图服务层实例
	 */
	private IMetaDataViewService metaDataViewService;

	public IMetaDataViewService getMetaDataViewService() {
		return metaDataViewService;
	}

	public void setMetaDataViewService(IMetaDataViewService metaDataViewService) {
		this.metaDataViewService = metaDataViewService;
	}

	/**
	 * 获取所有视图
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:05:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/getAll", method = RequestMethod.GET)
	public @ResponseBody
	Object getAll(@ModelAttribute ViewRequestData viewRequestData)
			throws Exception {
		final String viewId = viewRequestData.getViewId();	
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(new MetaDataViewScope());
		context.getResponse().regiestResultHandler(
				new IResultHandler<List<PackageBasicView>>() {
					@Override
					public IResult<List<Map>> handle(IContext context,
							IResult<List<PackageBasicView>> result)
							throws IllegalAccessException,
							InvocationTargetException {

						List<Map> list = new ArrayList<Map>();
						for (PackageBasicView view : result.getResult()) {
							if(StringUtils.isEmpty(viewId)){
								if(view.getViewType().equals(MetaDataViewType.SYSTEM)){
									Map map = new HashMap();
									map.put("id", view.getId());
									map.put("text", view.getViewName());
									map.put("leaf", false);
									map.put("expanded", false);
									map.put("nodeType", 1);
									list.add(map);
								}
							}else{
								if(view.getId().equals(viewId)){
									Map map = new HashMap();
									map.put("id", view.getId());
									map.put("text", view.getViewName());
									map.put("leaf", false);
									map.put("expanded", false);
									map.put("nodeType", 1);
									list.add(map);
								}								
							}
						}
						return new ModelAndViewResult(
								ResultCode.RESULT_CODE_SUCCESS, "创建成功", list);
					}
				});
		this.metaDataViewService.getAllView(context);
		return context.getResponse().getResult();
	}

	/**
	 * 根据类型（系统or用户）获取相应视图
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月25日 下午1:41:18
	 * @version V1.0
	 */
	@RequestMapping(value = "/findByType", method = RequestMethod.GET)
	public @ResponseBody
	Object findByType(@ModelAttribute ViewRequestData viewRequestData)
			throws Exception {
		String viewType = viewRequestData.getViewType();// 视图类型
		MetaDataViewScope scope = new MetaDataViewScope();
		scope.setViewType(viewType);
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(scope);
		context.getResponse().regiestResultHandler(
				new IResultHandler<List<PackageBasicView>>() {

					@Override
					public IResult<List<Map<String, Object>>> handle(
							IContext context,
							IResult<List<PackageBasicView>> result)
							throws IllegalAccessException,
							InvocationTargetException {
						List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
						for (PackageBasicView view : result.getResult()) {
							Map<String, Object> map = new HashMap<String, Object>();
							map.put("id", view.getId());
							map.put("text", view.getViewName());
							map.put("remark", view.getRemark());
							map.put("displayOrder", view.getDisplayOrder());
							map.put("leaf",
									"0".equals(view.getViewType()) ? true
											: false);
							map.put("expanded", false);
							map.put("nodeType", 1);
							list.add(map);
						}
						return new ModelAndViewResult(
								ResultCode.RESULT_CODE_SUCCESS, "获取类型视图成功",
								list);
					}

				});
		this.metaDataViewService.getByScope(context);
		return context.getResponse().getResult();
	}

	/**
	 * 根据视图Id查询文件夹
	 * <p>
	 * <br>
	 * 
	 * @param viewRequestData
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015-7-27 上午9:45:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/findFolderByViewId", method = RequestMethod.GET)
	public @ResponseBody
	Object findFolderByViewId(@ModelAttribute ViewRequestData viewRequestData)
			throws Exception {
		// TODO
		String parentId = viewRequestData.getParentId();// 文件夹的父id（视图id或父文件id）
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(parentId);
		context.getResponse().regiestResultHandler(
				new IResultHandler<List<PackageFolderBasicView>>() {

					@Override
					public IResult<List<Map<String, Object>>> handle(
							IContext context,
							IResult<List<PackageFolderBasicView>> result)
							throws IllegalAccessException,
							InvocationTargetException {
						// TODO
						List<Map<String, Object>> viewList = new ArrayList<Map<String, Object>>();
						List<PackageFolderBasicView> list = result.getResult();
						for (PackageFolderBasicView folder : list) {
							Map<String, Object> map = new HashMap<String, Object>();
							map.put("id", folder.getId());
							map.put("viewId", folder.getViewId());
							map.put("parentId", folder.getParentId());
							map.put("text", folder.getName());
							map.put("folderLevel", folder.getFolderLevel());
							map.put("displayOrder", folder.getDisplayOrder());
							map.put("leaf", false);
							map.put("expanded", false);
							viewList.add(map);
						}
						return new ModelAndViewResult(
								ResultCode.RESULT_CODE_SUCCESS, "获取子文件夹成功",
								viewList);
					}

				});
		this.metaDataViewService.getByFolderId(context);
		return context.getResponse().getResult();
	}

	/**
	 * 添加用户自定义视图，并保存用户上传的图标文件
	 * <p>
	 * <br>
	 * 
	 * @param view
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月27日 下午4:08:48
	 * @version V1.0
	 */
	@RequestMapping(value = "/addView", method = RequestMethod.POST)
	public @ResponseBody
	Object addView(@RequestBody PackageBasicView view) throws Exception {
		// TODO 图标文件的上传保存处理
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = this.metaDataViewService.create(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 添加用户自定义视图，并保存用户上传的图标文件
	 * <p>
	 * <br>
	 * 
	 * @param view
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月27日 下午4:08:48
	 * @version V1.0
	 */
	@RequestMapping(value = "/editView", method = RequestMethod.POST)
	public @ResponseBody
	Object editView(@RequestBody PackageBasicView view) throws Exception {
		// TODO 图标文件的上传保存处理
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = this.metaDataViewService.update(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 删除视图
	 * <p>
	 * <br>
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月27日 下午5:55:21
	 * @version V1.0
	 */
	@RequestMapping(value = "/deleteView", method = RequestMethod.POST)
	public @ResponseBody
	Object deleteView(@ModelAttribute ViewRequestData viewRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(viewRequestData.getId());
		IResponse response = this.metaDataViewService.delete(context);
		return response.getResult();
	}

	/**
	 * 添加子文件夹
	 * <p>
	 * <br>
	 * 
	 * @param view
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月27日 下午6:39:19
	 * @version V1.0
	 */
	@RequestMapping(value = "/addFolder", method = RequestMethod.POST)
	public @ResponseBody
	Object addFolder(@RequestBody PackageFolderBasicView view) throws Exception {
		// TODO 图标文件的上传保存处理
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = this.metaDataViewService.createFolder(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 修改子文件夹
	 * <p>
	 * <br>
	 * 
	 * @param view
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月27日 下午6:39:19
	 * @version V1.0
	 */
	@RequestMapping(value = "/editFolder", method = RequestMethod.POST)
	public @ResponseBody
	Object editFolder(@RequestBody PackageFolderBasicView view)
			throws Exception {
		// TODO 图标文件的上传保存处理
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = this.metaDataViewService.createFolder(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 删除子文件夹
	 * <p>
	 * <br>
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2015年7月27日 下午5:55:21
	 * @version V1.0
	 */
	@RequestMapping(value = "/deleteFolder", method = RequestMethod.POST)
	public @ResponseBody
	Object deleteFolder(@ModelAttribute ViewRequestData viewRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(viewRequestData.getId());
		IResponse response = this.metaDataViewService.deleteFolder(context);
		return response.getResult();
	}

}
