/**
 * @Title: BaseDao.java
 * <p>TODO
 * @author He yuqing
 * @date 2015年7月8日 下午3:49:56
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd.
 * @version V1.0
 */

package com.gilight.dep.metadata.dao.impl;

import com.gilight.dep.framework.core.dao.db.BaseHibernateDao;
import com.gilight.dep.framework.core.exception.DaoException;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.metadata.dao.IMetaDataDao;
import com.gilight.dep.metadata.dao.IMetaModelDao;
import com.gilight.dep.metadata.view.FiledValView;
import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

/**
 * @ClassName: BaseDao
 *             <p>
 *             TODO<br>
 * @author wzx
 * @date 2015年7月8日 下午3:49:56
 * @version V1.0
 * @since JDK 1.6
 */

public class BaseDao extends BaseHibernateDao implements IMetaModelDao,
        IMetaDataDao {
    private static final Logger logger = Logger
            .getLogger(BaseDao.class);

    /**
     * <p>
     * <br>
     *
     * @param args
     * @author wzx
     * @date 2015年7月8日 下午3:49:56
     * @version V1.0
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub

    }

    public <T> List<IEntity> findByEntity(IEntity entity) {
        Session session = this.getSession();

        Criteria crit = session.createCriteria(entity.getClass());
        crit.setCacheable(true);

        List<FiledValView> list = getParam(entity);
        for (FiledValView filedValView : list) {
            crit.add(Restrictions.eq(filedValView.getName(), filedValView.getVal()));
        }
        List<IEntity> qlist = crit.list();
        return qlist;
    }
    @Override
    public <T extends IEntity> List<T> findByEntity(T entity,Class<T> type) {
        Session session = this.getSession();

        Criteria crit = session.createCriteria(entity.getClass());
        crit.setCacheable(true);

        List<FiledValView> list = getParam(entity);
        for (FiledValView filedValView : list) {
            crit.add(Restrictions.eq(filedValView.getName(), filedValView.getVal()));
        }
        List<T> qlist = crit.list();
        return qlist;
    }
    public <T> List<IEntity> findByOrEntity(List<IEntity> entitys) {
        List<IEntity> qlist = new ArrayList<IEntity>();
        for (IEntity iEntity : entitys) {
            List<IEntity> list = findByEntity(iEntity);
            qlist.addAll(list);
        }
        return qlist;
    }

    public int deleteByEntity(IEntity entity) {
        Session session = this.getSession();
        List<FiledValView> list = getParam(entity);
        StringBuffer hqlbuff = new StringBuffer(" where 1=1 ");
        if (list == null || list.size() == 0) {
            return 0;
        }
        for (FiledValView filedValView : list) {
            hqlbuff.append(" and ");
            hqlbuff.append(filedValView.getName());
            hqlbuff.append("=");
            if (filedValView.getType() == String.class) {
                hqlbuff.append("'");
                hqlbuff.append(filedValView.getVal());
                hqlbuff.append("'");
            } else {
                hqlbuff.append(filedValView.getVal());
            }
        }
        //String hql="delete "
        String hql = "delete " + entity.getClass().getName() + " " + hqlbuff.toString();
        //Criteria crit=session.createCriteria(entity.getClass());
        Query query = session.createQuery(hql);
        return query.executeUpdate();
        //return qlist;
    }

    private List<FiledValView> getParam(IEntity entity) {
        List<FiledValView> list = new ArrayList<FiledValView>();
        try {
            Field[] fields = entity.getClass().getDeclaredFields();
            for (Field field : fields) {

                field.setAccessible(true);
                //field.getType().toString()
                if (field.getType() == String.class) {
                    String name = field.getName();
                    String val = (String) field.get(entity);
                    if (val == null || val.equals("")) {
                        continue;
                    }
                    FiledValView fvv = new FiledValView();
                    fvv.setName(name);
                    fvv.setVal(val);
                    fvv.setType(field.getType());
                    list.add(fvv);
                }

                if (field.getType() == Integer.class) {
                    String name = field.getName();
                    Integer val = (Integer) field.get(entity);
                    if (val == null) {
                        continue;
                    }
                    FiledValView fvv = new FiledValView();
                    fvv.setName(name);
                    fvv.setVal(val);
                    fvv.setType(field.getType());
                    list.add(fvv);
                }

            }
        } catch (IllegalArgumentException | IllegalAccessException e) {
            // TODO Auto-generated catch block
            logger.error(e);
            e.printStackTrace();
        }
        return list;

    }


    public <T> List<IEntity> findByParamList(String param, List<String> idlist, Class<T> type)
            throws DaoException {
        List<IEntity> list = new ArrayList<IEntity>();
        if (idlist == null || idlist.size() == 0) {
            return list;
        }
        String hql = "from " + type.getName()
                + " as model where model." + param + " in (:idlist)";
        Query queryObject = getSession().createQuery(hql);
        // queryObject.setParameter(0, idlist);
        queryObject.setParameterList("idlist", idlist);
        return queryObject.list();
        // return null;
    }


    public <T> List<IEntity> findByIdList(List<String> idlist, Class<T> type)
            throws DaoException {
        List<IEntity> list = new ArrayList<IEntity>();
        if (idlist == null || idlist.size() == 0) {
            return list;
        }
        String hql = "from " + type.getName()
                + " as model where model.id in (:idlist)";
        Query queryObject = getSession().createQuery(hql);
        // queryObject.setParameter(0, idlist);
        queryObject.setParameterList("idlist", idlist);
        return queryObject.list();
        // return null;
    }

    /**
     * 根据id删除
     * <p><br>
     * @param id
     *
     * @param type
     * @return
     * @author wzx
     * @date 2015年7月31日 下午1:53:18
     * @version V1.0
     */
    public int deleteById(String id, Class type) {
        return this.delete("id", id, type);
    }

    /**
     * 根据ids删除
     * <p><br>
     * @param ids
     *
     * @param type
     * @return
     * @author wzx
     * @date 2015年7月31日 下午1:53:18
     * @version V1.0
     */
    public int deleteById(List<String> ids, Class type) {
        for (String id : ids) {
            deleteById(id, type);
        }
        return 1;
    }


    /**
     * 条件删除
     * <p><br>
     * @param param
     * @param val
     * @param type
     * @return
     * @author wzx
     * @date 2015年7月31日 下午1:53:18
     * @version V1.0
     */
    public int delete(String param, String val, Class type) {
        String hql = "delete " + type.getName() + " as p where p." + param + "=?";
        Query query = getSession().createQuery(hql);
        query.setString(0, val);

        return query.executeUpdate();
    }

    /**
     * 直接执行sql语句
     * <p>
     * <br>
     *
     * @author wzx
     * @date 2015年7月23日 下午5:05:27
     * @version V1.0
     */
    public int executeSql(String sql) throws DaoException {
        System.out.println("准备执行:" + sql);
        logger.info("准备执行:" + sql);
        return getSession().createSQLQuery(sql).executeUpdate();

    }

    public int executeSql(String sql, String id) throws DaoException {
        SQLQuery query = getSession().createSQLQuery(sql);
        query.setString(0, id);
        return query.executeUpdate();

    }

    /**
     * sql查询
     * <p><br>
     * @param sql
     * @param type
     * @return
     * @throws DaoException
     * @author wzx
     * @date 2015年7月31日 下午6:18:48
     * @version V1.0
     */
    public <T> List<T> createSQLQuery(String sql, Class<T> type) throws DaoException {
        SQLQuery query = getSession().createSQLQuery(sql);
        query.addEntity(type);
        return query.list();
    }

    public int executehql(String hql) throws DaoException {
        System.out.println("准备执行:" + hql);
        logger.info("准备执行:" + hql);
        int b=getSession().createQuery(hql).executeUpdate();
       // getSession().flush();
        return b;

    }
    @Override
    public void flush() throws DaoException {

        getSession().flush();


    }


    //List cats = sess.createSQLQuery( " select {cat.*} from cats cat " ).addEntity( " cat " , Cat. class ).list();

}
