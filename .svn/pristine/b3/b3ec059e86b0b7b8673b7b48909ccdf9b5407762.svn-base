package com.gilight.dep.metadata.service.impl;

import com.csvreader.CsvReader;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.model.IModel;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.framework.core.service.impl.BasicServiceImpl;
import com.gilight.dep.framework.util.common.UUIDGenerator;
import com.gilight.dep.metadata.entity.*;
import com.gilight.dep.metadata.enums.MetaDataStatus;
import com.gilight.dep.metadata.repository.IMetaDataBaseRepository;
import com.gilight.dep.metadata.repository.IMetaModelBasicRepository;
import com.gilight.dep.metadata.repository.IMetaModelCompRepository;
import com.gilight.dep.metadata.service.IGatherExcuteService;
import com.gilight.dep.metamodel.model.MmMetaModelModel;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class GatherExcuteServiceImpl extends BasicServiceImpl implements
		IGatherExcuteService {
	@Autowired
	private MmMetaModelModel mmMetaModelModel;
	private static final Logger logger = Logger
			.getLogger(GatherExcuteServiceImpl.class);

	private IMetaDataBaseRepository metaDataBaseRepository = null;

	private IMetaModelQueryService metaModelQueryService = null;

	private IMetaModelCompRepository metaModelCompRepository;


	private IMetaModelBasicRepository metaModelBasicRepository;

	public IMetaModelBasicRepository getMetaModelBasicRepository() {
		return metaModelBasicRepository;
	}

	public void setMetaModelBasicRepository(IMetaModelBasicRepository metaModelBasicRepository) {
		this.metaModelBasicRepository = metaModelBasicRepository;
	}

	public IMetaModelCompRepository getMetaModelCompRepository() {
		return metaModelCompRepository;
	}

	public void setMetaModelCompRepository(IMetaModelCompRepository metaModelCompRepository) {
		this.metaModelCompRepository = metaModelCompRepository;
	}

	public IMetaDataBaseRepository getMetaDataBaseRepository() {
		return metaDataBaseRepository;
	}

	public void setMetaDataBaseRepository(IMetaDataBaseRepository metaDataBaseRepository) {
		this.metaDataBaseRepository = metaDataBaseRepository;
	}

	public IMetaModelQueryService getMetaModelQueryService() {
		return metaModelQueryService;
	}

	public void setMetaModelQueryService(IMetaModelQueryService metaModelQueryService) {
		this.metaModelQueryService = metaModelQueryService;
	}

	@Override
	public IResponse getByScope(IContext arg0) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IModel initModel(IContext context) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class getModelClass() {
		// TODO Auto-generated method stub
		return null;
	}
	/*public void getherCsvByMdName(String name, String compMmId, String pathFile) throws Exception {
		this.getMetaDataBaseRepository().get
	}*/
	//7dbd01b8-b9e3-4841-aebc-0588ca27dcba
	//8537DBAAC8F548ADA179BB8BA21B5F9B
	@Override
	public void getherCsv(String mdid, String compMmId, String pathFile) throws Exception {
		MdMetadata fatMdMetadata = this.getMetaDataBaseRepository().getById(mdid); //组合端元数据
		MmComposition mmComposition=this.getMetaModelCompRepository().getById(compMmId); //组合关系

		String tommid=mmComposition.getToMmId(); //拿到被组合端元模型id
		MmMetamodel mmMetamodel= metaModelQueryService.findModelById(tommid); //被组合端元模型
		if (mmMetamodel==null||mmComposition==null||fatMdMetadata==null){
			logger.error("没有找到元模型,或元数据id错误");
			return;
		}
		List<MdAttribute> mdAttributeList= new ArrayList<MdAttribute>();
		//metaModelQueryService.findModelById(mmMetamodel.getId());

		List<IEntity> attrList=metaModelBasicRepository.findAttribByMmid(mmMetamodel.getId());
		List<String> attrCodes = new ArrayList<String>();
		/*for (IEntity entity:attrList ) {
			MmAttribute mmAttribute=(MmAttribute)entity;
			*//*attrCodes.add(mmAttribute.getAttCode());*//*


		}*/

		ArrayList<HashMap<String,String>> maps=readCvs(pathFile);
		//CsvReader r = new CsvReader(pathFile, ',', Charset.forName("GBK"));
		if (maps==null||maps.size()==0){
			return;
		}
		for (HashMap map:maps ) {
			List<MdAttribute> mdAttributesList=new ArrayList<MdAttribute>();

			int radomInt = new Random().nextInt(999999999);
			String uuid= UUIDGenerator.getUUID();
			MdMetadata newMdMetadata=new MdMetadata();
			newMdMetadata.setId(uuid);
			newMdMetadata.setMmId(tommid);
			newMdMetadata.setMmName(mmMetamodel.getMmName());
			newMdMetadata.setStatus(MetaDataStatus.publishVer);
			newMdMetadata.setMdCode(tommid+radomInt);
			newMdMetadata.setIssys(0);

			String remark= (String) map.get("remark");
			String mdname= (String) map.get("name");
			if (mdname==null||"".equals(mdname)){
				//continue;
			}
			if (remark==null||"".equals(remark)){
				remark=(String) map.get("enName");
			}
			newMdMetadata.setRemark(remark);
			newMdMetadata.setMdName(mdname);

			metaDataBaseRepository.create(newMdMetadata);

			MdComposition mdComposition = new MdComposition();
			mdComposition.setId(UUIDGenerator.getUUID());
			mdComposition.setFromMdCode(fatMdMetadata.getMdCode());
			mdComposition.setFromMdId(fatMdMetadata.getId());
			mdComposition.setMmCompId(compMmId);
			mdComposition.setName(fatMdMetadata.getMdName()+"_"+mdname);
			mdComposition.setToMdCode(newMdMetadata.getMdCode());
			mdComposition.setToMdId(newMdMetadata.getId());

			metaDataBaseRepository.create(mdComposition);



			if (attrList==null||attrList.size()==0){
				continue;
			}
			for (IEntity entity:attrList ) {
				if (entity==null){
					continue;
				}
				MmAttribute mmAttribute=(MmAttribute)entity;

				/*attrCodes.add(mmAttribute.getAttCode());*/

				String attid=mmAttribute.getId();
				String attcode =mmAttribute.getAttCode();

				String val= (String) map.get(attcode);
				if (val==null||"".equals(val)){
					continue;
				}
				String attname =mmAttribute.getAttName();


				MdAttribute mdAttribute = new MdAttribute();
				mdAttribute.setMmAttId(attid);
				mdAttribute.setId(UUIDGenerator.getUUID());
				mdAttribute.setMdId(uuid);
				mdAttribute.setMmAttName(attname);
				mdAttribute.setValUe(val);
				//mdAttributesList.add(mdAttribute);

				metaDataBaseRepository.create(mdAttribute);

			}

		}
		//r.readHeaders();



	}





	public ArrayList<HashMap<String,String>> readCvs(String path){
		ArrayList<HashMap<String,String>> mapList = new ArrayList<HashMap<String,String>>(); //用来保存数据
		try {
			//ArrayList<String[]> csvList = new ArrayList<String[]>(); //用来保存数据
			//path="F:\\v2\\test\\biao.csv";
			CsvReader r = new CsvReader(path, ',', Charset.forName("GBK"));

			//读取表头
			r.readHeaders();
			String[] herads=r.getHeaders();
			HashMap<String,String> map = new HashMap<String,String>();
			//逐条读取记录，直至读完
			while (r.readRecord()) {
				//读取一条记录
				//System.out.println(r.getRawRecord());
				//按列名读取这条记录的值
				map = new HashMap<String,String>();
				for (int i = 0; i <herads.length ; i++) {
					//System.out.println(herads[i]);
					//System.out.println(r.get(herads[i]));

					map.put(herads[i],r.get(herads[i]));
				}


				//mapList.

				mapList.add(map);
			}


			r.close();


		} catch (FileNotFoundException e) {
			logger.equals(e);
			e.printStackTrace();
		} catch (IOException e) {
			logger.equals(e);
			e.printStackTrace();
		}
		return mapList;
	}

	static public void main(String arg[]){
		/*String path="F:\\v2\\标准整理\\代码表\\代码明细\\财务管理类代码子集\\2012教育行业_编码表元数据.csv";
		GatherExcuteServiceImpl ges = new GatherExcuteServiceImpl();
		ges.readCvs(path);*/
		GatherExcuteServiceImpl ges = new GatherExcuteServiceImpl();
		//ges.createCsv();

	}
}
