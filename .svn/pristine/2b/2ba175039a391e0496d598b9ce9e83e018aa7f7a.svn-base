/**   
analyseExcuteService * @Title: KettleSpringFactory.java  
 * @Description: TODO 
 * @author zps   
 * @date 2015骞�鏈�9鏃�涓嬪崍2:32:46
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.spring;

import com.csvreader.CsvReader;
import com.gilight.dep.framework.core.exception.GilightException;
import com.gilight.dep.framework.core.exception.RepositoryException;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.metadata.entity.MdAttribute;
import com.gilight.dep.metadata.entity.MdComposition;
import com.gilight.dep.metadata.entity.MdMetadata;
import com.gilight.dep.metadata.repository.impl.MetaDataBaseRepositoryImpl;
import com.gilight.dep.metadata.service.impl.GatherExcuteServiceImpl;
import org.apache.commons.io.filefilter.AbstractFileFilter;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GatherExcuteServiceTest {

	private static GatherExcuteServiceTest instance = new GatherExcuteServiceTest();
	private static ApplicationContext factory;

	public static GatherExcuteServiceTest getInstance() {
		return instance;
	}

	static {
		//String[] beans={"beans/service/beans.xml","beans/hibernate/hibernate.xml"};
		factory = new ClassPathXmlApplicationContext("test.xml");
	}

	public static Object getBean(String name) {
		if (factory == null) {
			return null;
		}
		try {
			return factory.getBean(name);
		} catch (Exception e) {
			return null;
		}
	}

	public static ApplicationContext getFactory() {
		return factory;
	}

	public static void setFactory(ApplicationContext factory) {
		GatherExcuteServiceTest.factory = factory;
	}

	public static void main(String[] args) {
		try {

			String path="D:\\代码明细\\csv\\（规范性附录）教育部使用的学校、学科专业与资产分类代码";
			GatherExcuteServiceTest test = new GatherExcuteServiceTest();
			//test.gatherElsCodeMapp();
			//test.tsetImpDetail();
			//test.tset();
			//test.gatherDataEle();
			//File file=new File("F:\\v2\\标准整理\\csv贺帅杰\\csv\\修改后的文件");
			//File tmpFile=test.findFile(file,"GXWS0305 前往国家地区子类");
			test.gatherColEleMapp();
			//System.out.println(tmpFile.getAbsoluteFile()+"\\"+tmpFile.getName());




		} catch (Exception e) {
			e.printStackTrace();
		}

		// System.out.println(s.findAll()==null);
	}

	/**
	 * 采集列与数据元映射关系
	 */
	public void gatherColEleMapp() throws RepositoryException {
		GatherExcuteServiceImpl gs = (GatherExcuteServiceImpl) GatherExcuteServiceTest.getBean("gatherExcuteService");
		//获取所有的数据源
		MdMetadata mdMetadata = new MdMetadata();
		mdMetadata.setUpdateDate(null);
		mdMetadata.setStatus(11);
		mdMetadata.setMmId("DepDataEle");

		List<IEntity> elelist= gs.getMetaDataBaseRepository().findByEntity(mdMetadata);
		//获取所有的业务实体排
		MdMetadata mdMetadataf = new MdMetadata();
		mdMetadataf.setUpdateDate(null);
		mdMetadataf.setStatus(11);
		mdMetadataf.setMmId("DepBussFeature");

		List<IEntity> dbflist= gs.getMetaDataBaseRepository().findByEntity(mdMetadataf);

		for (IEntity ientity:dbflist) {
			MdMetadata dbf= (MdMetadata) ientity;
			Map<String,String> dbfattmap = gs.getMetaDataBaseRepository().getAttrMapByMdId(dbf.getId());
			String code=dbfattmap.get("code");
			if (code==null||code.equals("")){
				continue;
			}
			for (IEntity entity:elelist) {
				MdMetadata ele= (MdMetadata) entity;
				Map<String,String> attmap = gs.getMetaDataBaseRepository().getAttrMapByMdId(ele.getId());
				String elecode=attmap.get("code");
				if (code.equals(elecode)){
					MetaDataBaseRepositoryImpl.MappingDepe mappingDepe=gs.getMetaDataBaseRepository().findMappingByNode(ele.getId(),dbf.getId());
					MdMetadata sourceMd=gs.getMetaDataBaseRepository().getById(ele.getId());
					MdMetadata targetMd=gs.getMetaDataBaseRepository().getById(dbf.getId());

					//MdMetadata sourceMd=mappingDepe.getSourceDepe().getId();
					gs.getMetaDataBaseRepository().createMapping(sourceMd,targetMd,mappingDepe.getTargetDepe().getFromMmId());
					//mappingDepe.get
					System.out.println(elecode);
				}
			}
		}





	}

	/**
	 * 采集数据源与编码的映射关系
	 */
	public void gatherElsCodeMapp() throws RepositoryException {
		GatherExcuteServiceImpl gs = (GatherExcuteServiceImpl) GatherExcuteServiceTest.getBean("gatherExcuteService");
		//获取csv
		File file=new File("F:\\v2\\标准整理\\数据源编码映射");
		File[] fileList=file.listFiles();
		if (fileList==null||fileList.length==0){
			return;
		}
		//获取所有的数据源
		Map<String ,MdMetadata> eleMap=new HashMap<String ,MdMetadata>();
		MdMetadata mdMetadata = new MdMetadata();
		mdMetadata.setUpdateDate(null);
		mdMetadata.setStatus(11);
		mdMetadata.setMmId("DepDataEle");

		List<IEntity> elelist= gs.getMetaDataBaseRepository().findByEntity(mdMetadata);
		for (IEntity entity:elelist) {
			MdMetadata mdMetadataNew = (MdMetadata) entity;
			eleMap.put(mdMetadataNew.getId(),mdMetadataNew);
		}


		for (File filetmp:fileList) {
			if (!filetmp.getName().endsWith(".csv")){
				continue;
			}
			ArrayList<HashMap<String,String>> cvsList= this.readCvs(filetmp.getAbsolutePath());
			for (HashMap map:cvsList) {
				String code= (String) map.get("code");
				String name= (String) map.get("name");
				String valueScope= (String) map.get("valueScope");

				MdAttribute mdAttribute= new MdAttribute();
				if (code==null||code.equals("")){
					continue;
				}
				mdAttribute.setValUe(code);

				List<IEntity> attrList = gs.getMetaDataBaseRepository().findByEntity(mdAttribute);
				if (attrList==null||attrList.size()==0){
					continue;
				}
				if (attrList.size()==1){

				}
				for (IEntity attrEntity:attrList ) {
					MdAttribute mdAttributeTmp = (MdAttribute) attrEntity;
					String mdid=mdAttributeTmp.getMdId();
					MdMetadata eleMd=eleMap.get(mdid);
					if (eleMd!=null){
						//找到了匹配的数据元,下一步该找编码了
						//根据名称valueScope找编码
						MdMetadata codeMd=new MdMetadata();
						codeMd.setMmId("DepCode");
						codeMd.setStatus(11);
						codeMd.setUpdateDate(null);
						codeMd.setMdName(valueScope);

						List<IEntity> codeMdList=gs.getMetaDataBaseRepository().findByEntity(codeMd);

						if (codeMdList==null||codeMdList.size()!=1){
							continue;  //没有配上
						}

						MdMetadata codeMdN= (MdMetadata) codeMdList.get(0);

						MetaDataBaseRepositoryImpl.MappingDepe mappingDepe=gs.getMetaDataBaseRepository().findMappingByNode(codeMdN.getId(),mdid);
						System.out.println(mappingDepe.getTargetDepe().getFromMmId());
						String sourceId=codeMdN.getId();
						String targetId=mdid;
						MdMetadata sourceMd=gs.getMetaDataBaseRepository().getById(sourceId);
						MdMetadata targetMd=gs.getMetaDataBaseRepository().getById(targetId);

						//MdMetadata sourceMd=mappingDepe.getSourceDepe().getId();
						gs.getMetaDataBaseRepository().createMapping(sourceMd,targetMd,mappingDepe.getTargetDepe().getFromMmId());
						//mappingDepe.get

					}
				}

			}
		}
		System.out.println("---------------------运行结束--------------------------");
	}

	public List<File> findAllCsvFile(){

		return null;
	}


	public List<File> findAllCsvFile(File root,  List<File> list) throws Exception {

		if (root.exists() && root.isDirectory()) {
			for (File file : root.listFiles()) {
				if (file.isFile() && file.getName().endsWith(".csv")) {// 如果是文件，而且同名
					list.add(file);
				} else {
					findAllCsvFile(file,list);
				}
			}
		}
		return list;
	}



	/**
	 * 采集实体列信息
	 */
	public void gatherBussObjColunm(){
		try {
			File fileRoot=new File("F:\\v2\\标准整理\\DIST_GBK");
			MdMetadata mdMetadata = new MdMetadata();
			mdMetadata.setUpdateDate(null);
			mdMetadata.setMmId("DepBussObject");

			GatherExcuteServiceImpl gs = (GatherExcuteServiceImpl) GatherExcuteServiceTest.getBean("gatherExcuteService");
			List<IEntity> list=gs.getMetaDataBaseRepository().findByEntity(mdMetadata);
			if (list==null||list.size()==0){
				return;
			}
			int t=0;
			List<File> fileslist = new ArrayList<File>();
			fileslist=findAllCsvFile(fileRoot,fileslist);

			for (File file:fileslist) {


				String fileName=file.getName();
				System.out.println(fileName);
				for (IEntity entity:list ) {

					MdMetadata mdMetadataNew= (MdMetadata) entity;
					//System.out.println(mdMetadataNew.getMdName());
					if (mdMetadataNew==null||mdMetadataNew.getMdName()==null||mdMetadataNew.getMdName().equals("")){
						continue;
					}

					/*if (enName!=null&&fileName.indexOf(enName)>0){
						t++;
						System.out.println(map.get("enName"));
						System.out.println(mdMetadataNew.getMdName());
						System.out.println(file.getName());
						System.out.println(file.getAbsoluteFile());
					}*/
					if(fileName!=null&&fileName.indexOf(mdMetadataNew.getMdName())>0){

						Map<String,String> map =gs.getMetaDataBaseRepository().getAttrMapByMdId(mdMetadataNew.getId());
						String enName=map.get("enName");
						String allName=enName+" "+mdMetadataNew.getMdName()+".csv";
						if (allName.equalsIgnoreCase(fileName)){
							t++;
							System.out.println(file.getName());
							System.out.println(allName);
							gs.getherCsv(mdMetadataNew.getId(),"5A0FCE9E1DDB400B8E2D8D076D5BDB03",file.getAbsolutePath());
						}



					}
				}
			}

			System.out.println("---------------------程序执行结束-------------------------"+t);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 采集数据元信息
	 */
	public void gatherDataEle(){
		//查询所有数据元小类
		try {
			File fileRoot=new File("F:\\v2\\标准整理\\csv贺帅杰\\csv\\修改后的文件");
			MdMetadata mdMetadata = new MdMetadata();
			mdMetadata.setUpdateDate(null);
			mdMetadata.setMmId("DepPkgDataEle");

			GatherExcuteServiceImpl gs = (GatherExcuteServiceImpl) GatherExcuteServiceTest.getBean("gatherExcuteService");
			List<IEntity> list=gs.getMetaDataBaseRepository().findByEntity(mdMetadata);
			if (list==null||list.size()==0){
				return;
			}
			int t=0;
			List<File> fileslist = new ArrayList<File>();
			for (IEntity entity:list) {
				MdMetadata mdMetadataNew=(MdMetadata)entity;
				String mdName=mdMetadataNew.getMdName();
				//System.out.println(mdName);
				fileslist= new ArrayList<File>();
				List<File>  filelist=findFile(fileRoot,mdName,fileslist);

				for (File file:filelist ) {
					String tmps[]=listCsvFile(file.getAbsolutePath());
					if (tmps!=null&&tmps.length>0){
						t++;
						//System.out.println(file.getAbsoluteFile());


						String filepath=file.getAbsolutePath()+"\\"+tmps[0];
						System.out.println(filepath);
						gs.getherCsv(mdMetadataNew.getId(),"F960C5D942514619BF5BCCB35C28A4E5",filepath);


					}
				}


				/*File fileNew = findFile(fileRoot,mdName);
				if (fileNew!=null){
					System.out.println(mdName);
					System.out.println(fileNew.getAbsoluteFile());
				}*/
				//System
				//System.out.println(filelist);
				/*if (tmpFile!=null){
					System.out.println(mdName);
					System.out.println(tmpFile.getAbsoluteFile());
				}*/
			}

			System.out.println("---------------------程序执行结束-------------------------"+t);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public String[] fileDir(String path){
		//IOFileFilter ioFileFilter = new DirectoryFileFilter();
		File file = new File(path);
		//FileFilter fileFilter = new
		//FilenameFilter
		//NameFileFilter
		String arg[] = {};
		//Collection<File> list=FileUtils.listFiles(file,arg,false);
		String[] dirs = file.list();
		return dirs;
		/*for (File file1:list) {
			System.out.println(file1.getName());
		}*/
	}
	public class CsvFileFilter extends AbstractFileFilter{
		public boolean accept(File dir, String name) {
			if (name.endsWith(".csv")){
				return true;
			}
			return false;
			//return accept(new File(dir, name));
		}
	}
	public String[] listCsvFile(String path){
		//IOFileFilter ioFileFilter = new DirectoryFileFilter();
		File file = new File(path);
		//FileFilter fileFilter = new
		CsvFileFilter csvFileFilter = new CsvFileFilter();

		//NameFileFilter
		//String arg[] = {"2012"};
		//NameFileFilter nameFileFilter = new NameFileFilter(arg);
		//Collection<File> list=FileUtils.listFiles(file,arg,false);
		String[] dirs=file.list(csvFileFilter);
		//String[] dirs = file.list();
		return dirs;
		/*for (File file1:list) {
			System.out.println(file1.getName());
		}*/
	}

//static List<File> list = new ArrayList<File>();// 存储目标文件
	public List<File> findFile(File root, String name, List<File> list) throws Exception {

		if (root.exists() && root.isDirectory()) {
			for (File file : root.listFiles()) {
				if (file.isFile() && file.getName().equals(name)) {// 如果是文件，而且同名
					//list.add(file);
				} else if (file.isDirectory()&&file.getName().equals(name)) {// 如果是目录，则继续递归遍历
					/*System.out.println("*****************************");
					System.out.println(file.getAbsolutePath());
					System.out.println(file.getPath());
					System.out.println(file.getCanonicalPath());*/
					list.add(file);

				}else {
					findFile(file, name,list);
				}
			}
		}
		return list;
	}


	public List<File> findFiles(File root, String name, List<File> list) throws Exception {

		if (root.exists() && root.isDirectory()) {
			for (File file : root.listFiles()) {
				if (file.isFile() && file.getName().equals(name)) {// 如果是文件，而且同名
					//list.add(file);
				} else if (file.isDirectory()&&file.getName().equals(name)) {// 如果是目录，则继续递归遍历
					/*System.out.println("*****************************");
					System.out.println(file.getAbsolutePath());
					System.out.println(file.getPath());
					System.out.println(file.getCanonicalPath());*/
					list.add(file);

				}else {
					findFile(file, name,list);
				}
			}
		}
		return list;
	}

	public File findFile(File root, String name) throws Exception {

		if (root.exists() && root.isDirectory()) {
			for (File file : root.listFiles()) {
				if (file.isFile() && file.getName().equals(name)) {// 如果是文件，而且同名
					//list.add(file);
				} else if (file.isDirectory()&&file.getName().equals(name)) {// 如果是目录，则继续递归遍历
					/*System.out.println("*****************************");
					System.out.println(file.getAbsolutePath());
					System.out.println(file.getPath());
					System.out.println(file.getCanonicalPath());*/
					/*String[] tmps=listCsvFile(file.getAbsolutePath());
					if (tmps!=null&&tmps.length>0){
						//return file;
						return file;
					}else {
						//findFile(file, name,list);
					}*/
					return file;
				}else {
					return findFile(file, name);
				}
			}
		}
		return null;
	}

	/**
	 * 代码明细导入
	 * @throws GilightException
	 */
	public void tsetImpDetail() throws GilightException{
		GatherExcuteServiceImpl gs = (GatherExcuteServiceImpl) GatherExcuteServiceTest.getBean("gatherExcuteService");
		//gs.createTableMapping(null);
		//7dbd01b8-b9e3-4841-aebc-0588ca27dcba
		//8537DBAAC8F548ADA179BB8BA21B5F9B
		//String path="F:\\v2\\标准整理\\代码表\\代码明细\\财务管理类代码子集\\csv\\2012教育行业_编码表元数据.csv";



		try {    //代码导入模块

			String path="D:\\代码明细\\csv李小康\\csv\\资产、图书、实验室管理类代码子集\\csv";
			String mdid="ead8c6e1-e437-489b-8ab9-5e708dcb8b14";    //类别元数据id
			//获取目录下csv
			String[] csvs=listCsvFile(path);
			MdComposition mdComposition = new MdComposition();
			mdComposition.setFromMdId(mdid);
			mdComposition.setUpdateDate(null);

			List<IEntity> compList=gs.getMetaDataBaseRepository().findByEntity(mdComposition);  //查询所有的组合子

			for (IEntity composition:compList) {
				MdComposition mdComposition1=(MdComposition)composition;
				String toMdId=mdComposition1.getToMdId();    //被组合的id
				/*MdMetadata mdMetadata = new MdMetadata();
				mdMetadata.setId(toMdId);
				mdMetadata.setUpdateDate(null);*/
				MdMetadata toMdMetadata=gs.getMetaDataBaseRepository().getById(toMdId);
				String toMdName=toMdMetadata.getMdName();

				for (int i = 0; i <csvs.length ; i++) {
					String cvsName=csvs[i];
					/*System.out.println(toMdId);
					System.out.println(cvsName);
					System.out.println(toMdName);*/
					System.out.println(cvsName);
					System.out.println(toMdName);
					if (cvsName.indexOf(toMdName)>=0){
						String filename=path+"\\"+cvsName;
						System.out.println(filename);
						gs.getherCsv(toMdId,"8537DBAAC8F548ADA179BB8BA21B5F9B",filename);
					}
				}

			}

			/*String[] fileDir=fileDir(path);

			for (String dir:fileDir) {
				String subpath=path+"\\"+dir;
				String[] csvFiles= listCsvFile(subpath);
				String csvfilename=csvFiles[0];
				String csv=subpath+"\\"+csvfilename;
				//System.out.println(dir);
				MdMetadata mdMetadata = new  MdMetadata();
				mdMetadata.setUpdateDate(null);
				mdMetadata.setMdName(dir);
				List<IEntity> mds =gs.getMetaDataBaseRepository().findByEntity(mdMetadata);
				if (mds==null||mds.size()==0){
					System.out.println("没有找到元数据:"+dir);
					continue;
				}
				*//*for (IEntity entity:mds) {
					mdMetadata= (MdMetadata) entity;
					String mdid=mdMetadata.getId();
					System.out.println(subpath);
					gs.getherCsv(mdid,"8537DBAAC8F548ADA179BB8BA21B5F9B",csv);
				}*//*

				//System.out.println(mdMetadata.getMdName());
			}*/

			//gs.getherCsv("7dbd01b8-b9e3-4841-aebc-0588ca27dcba","8537DBAAC8F548ADA179BB8BA21B5F9B",path);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 导入编码
	 * @throws GilightException
	 */
	public void tset() throws GilightException{
		GatherExcuteServiceImpl gs = (GatherExcuteServiceImpl) GatherExcuteServiceTest.getBean("gatherExcuteService");
		//gs.createTableMapping(null);
		//7dbd01b8-b9e3-4841-aebc-0588ca27dcba
		//8537DBAAC8F548ADA179BB8BA21B5F9B
		//String path="F:\\v2\\标准整理\\代码表\\代码明细\\财务管理类代码子集\\csv\\2012教育行业_编码表元数据.csv";



		try {    //代码导入模块

			String path="D:\\代码明细\\csv\\";
			String[] fileDir=fileDir(path);

			for (String dir:fileDir) {
				String subpath=path+"\\"+dir;
				String[] csvFiles= listCsvFile(subpath);
				String csvfilename=csvFiles[0];
				String csv=subpath+"\\"+csvfilename;
				//System.out.println(dir);
				MdMetadata mdMetadata = new  MdMetadata();
				mdMetadata.setUpdateDate(null);
				mdMetadata.setMdName(dir);
				List<IEntity> mds =gs.getMetaDataBaseRepository().findByEntity(mdMetadata);
				if (mds==null||mds.size()==0){
					System.out.println("没有找到元数据:"+dir);
					continue;
				}
				for (IEntity entity:mds) {
					mdMetadata= (MdMetadata) entity;
					String mdid=mdMetadata.getId();
					System.out.println(subpath);
					gs.getherCsv(mdid,"8537DBAAC8F548ADA179BB8BA21B5F9B",csv);
				}

				//System.out.println(mdMetadata.getMdName());
			}

			//gs.getherCsv("7dbd01b8-b9e3-4841-aebc-0588ca27dcba","8537DBAAC8F548ADA179BB8BA21B5F9B",path);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
/*	public void tsetAllMapNode() throws GilightException {
		System.out.println("Test------");

		//ExcelGatherJobTaskModel jobmodel = new ExcelGatherJobTaskModel();
		MetaModelQueryServiceImpl gs = (MetaModelQueryServiceImpl) SpringFactoryModelMdtaDataBaseTest.getBean("metaModelQueryService");
		System.out.println("Test------");
		MetaModelDataMapView view = new MetaModelDataMapView();
		IContext context= ContextFactoryImpl.getInstance().createContextWithView(view);
		IContext idcontext= ContextFactoryImpl.getInstance().createContextWithID("212");
		//gs.findCompRootModel(context);
		//gs.findRootModel(context);
		//MmMapData mf = new MmMapData();
		//IResponse response=gs.findDepeList(context);
		//IResponse response1=gs.findCompList(context);
		IResponse response2=gs.findInheList(context);
		//IResponse response3=gs.findDepeList(context);
		System.out.println("Test------");
		System.out.println("Test------");
	}*/

	public ArrayList<HashMap<String,String>> readCvs(String path){
		ArrayList<HashMap<String,String>> mapList = new ArrayList<HashMap<String,String>>(); //用来保存数据
		try {
			//ArrayList<String[]> csvList = new ArrayList<String[]>(); //用来保存数据
			//path="F:\\v2\\test\\biao.csv";
			CsvReader r = new CsvReader(path, ',', Charset.forName("GBK"));

			//读取表头
			r.readHeaders();
			String[] herads=r.getHeaders();
			HashMap<String,String> map = new HashMap<String,String>();
			//逐条读取记录，直至读完
			while (r.readRecord()) {
				//读取一条记录
				//System.out.println(r.getRawRecord());
				//按列名读取这条记录的值
				map = new HashMap<String,String>();
				for (int i = 0; i <herads.length ; i++) {
					//System.out.println(herads[i]);
					//System.out.println(r.get(herads[i]));

					map.put(herads[i],r.get(herads[i]));
				}


				//mapList.

				mapList.add(map);
			}


			r.close();


		} catch (FileNotFoundException e) {
			//logger.equals(e);
			e.printStackTrace();
		} catch (IOException e) {
			//logger.equals(e);
			e.printStackTrace();
		}
		return mapList;
	}
}
