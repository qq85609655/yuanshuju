package com.gilight.dep.metadata.web.controller;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.metadata.entity.MdMetadata;
import com.gilight.dep.metadata.entity.MmComposition;
import com.gilight.dep.metadata.service.impl.GatherJobServiceImpl;
import com.gilight.dep.metadata.service.impl.MetaDataBaseServiceImpl;
import com.gilight.dep.metadata.view.MetaDataBaseView;
import com.gilight.dep.metadata.view.MetaDataSubBaseView;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * 扫描文件夹导入数据元
 * 
 * @ClassName: ImportMetadataTest
 *             <p>
 *             TODO<br>
 * @author yhy
 * @date 2017年4月13日 下午2:43:42
 * @version V1.0
 * @since JDK 1.7
 */
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(locations = {
		"classpath:/applicationContext.xml",
		"classpath:/spring-dispather.xml" })
public class ImportMetadataTest {
	@Autowired
	ApplicationContext ctx;
	@Autowired
	protected GatherJobServiceImpl gatherJobServiceImpl;
	@Autowired
	protected MetaDataBaseServiceImpl metadataService;


	


	public GatherJobServiceImpl getGatherJobServiceImpl() {
		return gatherJobServiceImpl;
	}

	public void setGatherJobServiceImpl(GatherJobServiceImpl gatherJobServiceImpl) {
		this.gatherJobServiceImpl = gatherJobServiceImpl;
	}

	public MetaDataBaseServiceImpl getMetadataService() {
		return metadataService;
	}

	public void setMetadataService(MetaDataBaseServiceImpl metadataService) {
		this.metadataService = metadataService;
	}

	@Test
	public void test() throws Exception {
		try {
			String path = "F:\\v2\\标准整理\\csv贺帅杰\\csv\\修改后的文件";
			importAllSubFiles("DepPkgDataEle-753945","2701c7a1-68c2-43a0-981d-12ebee33ca9f",path);
			Thread.sleep(600000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void importAllSubFiles(String mdCode,String mdid,String path) throws Exception {
		File file = new File(path);
		if (file.exists() == false) {
			return;
		}
		MdFolder fo = getAllFiles(file);
		List<File> files = fo.getFileList();
		List<File> folders = fo.getFolderList();

		for(File folder:folders){
			MetaDataSubBaseView view = new MetaDataSubBaseView();
			view.setParentMdId(mdid);
			view.setFromMdCode(mdCode);
			MetaDataBaseView subMetaData = new MetaDataBaseView();
			Random rand = new Random();
			int i = rand.nextInt();
			 String folderMdCode = "DepPkgDataEle"+ i;
			subMetaData.setMdCode(folderMdCode);
			subMetaData.setMdName(folder.getName());
			subMetaData.setMmId("DepPkgDataEle");
			subMetaData.setMmName("数据元小类");
			view.setSubMetaData(subMetaData);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			context.getResponse().regiestResultHandler(new ResultHandler(folderMdCode,folder){

				@Override
				public IResult handle(IContext paramIContext,
						IResult paramIResult) throws Exception {
					String mdId = (String) paramIResult.getResult();
					Thread.sleep(11000);
					importAllSubFiles(this.getFolderMdCode(),mdId,this.getFolder().getAbsolutePath());
					return paramIResult;
				}

			});
//			MetaDataBaseServiceImpl metadataService = ctx.getBean(MetaDataBaseServiceImpl.class);
			// 调用服务层的方法获取响应
			IResponse response = metadataService.createCompMetaData(context);

			importCsvFiles(mdid, "DepDataEle",files);
		}
		
	}

	
	
	
	public void importCsvFiles(String mdid, String toMmId, List<File> files) throws Exception {
		for(File file:files){
			importCsvFile(mdid,toMmId,file);
		}
		
	}
	public void importCsvFile(String mdid, String toMmId, File file) throws Exception {
		MdMetadata mdMetadata = gatherJobServiceImpl.getMetaDataBaseRepository().getById(mdid);
		if(mdMetadata!=null){
			String formMmId=mdMetadata.getMmId();
			MmComposition mmComposition = new MmComposition();
			mmComposition.setUpdateDate(null);
			mmComposition.setFromMmId(formMmId);
			mmComposition.setToMmId(toMmId);
			List<IEntity> list=gatherJobServiceImpl.getMetaDataBaseRepository().findByEntity(mmComposition);

			if (list==null||list.size()!=1){
				System.out.println("查找关系元模型错误");
				throw new ServiceException("查找关系元模型错误");
			}

			mmComposition = (MmComposition) list.get(0);

			String compId=mmComposition.getId();
			gatherJobServiceImpl.getGatherExcuteService().getherCsv(mdid,compId,file.getAbsolutePath());
		}
	}
	public static MdFolder getAllFiles(File dir) {
		MdFolder folder = new MdFolder();
		List<File> folders = new ArrayList<>();
		List<File> files = new ArrayList<>();
		folder.setFileList(files);
		folder.setFolderList(folders);
		File[] subFiles = dir.listFiles();
		for (int i = 0; i < subFiles.length; i++) {
			if (subFiles[i].isDirectory()) {
				folders.add(subFiles[i]);
			} else {
				files.add(subFiles[i]);
			}
		}
		return folder;
	}
}
