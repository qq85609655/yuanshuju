/**   
 * @Title: MetamodelController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import java.util.List;
import java.util.UUID;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.ModelAndViewResult;
import com.gilight.dep.framework.core.context.response.view.IView;
import com.gilight.dep.framework.core.controller.BaseController;
import com.gilight.dep.framework.core.exception.ControllerException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.exception.param.ControllerParamInvalidException;
import com.gilight.dep.metadata.view.MetaModelBasicView;
import com.gilight.dep.metadata.view.MetaModelCompBasicView;
import com.gilight.dep.metadata.view.MetaModelFolderView;
import com.gilight.dep.metadata.view.MetaModelView;
import com.gilight.dep.metadata.web.request.MetadataRequestData;
import com.gilight.dep.metadata.web.request.MetamodelRequestData;
import com.gilight.dep.metadata.web.response.ResultCode;
import com.gilight.dep.metamodel.service.IMetaModelCompService;
import com.gilight.dep.metamodel.service.IMetaModelFolderService;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;

import org.springframework.web.bind.annotation.*;

@RequestMapping("/metamodelcomp")
public class MetamodelCompController extends BaseController {

	private IMetaModelQueryService metaModelQueryService;
	public IMetaModelQueryService getMetaModelQueryService() {
		return metaModelQueryService;
	}

	public void setMetaModelQueryService(
			IMetaModelQueryService metaModelQueryService) {
		this.metaModelQueryService = metaModelQueryService;
	}

	private IMetaModelCompService metaModelCompService;

	public IMetaModelCompService getMetaModelCompService() {
		return metaModelCompService;
	}

	public void setMetaModelCompService(IMetaModelCompService metaModelCompService) {
		this.metaModelCompService = metaModelCompService;
	}

	/**
	 *
	 * <p>
	 * 检查view 参数<br>
	 *
	 * @throws ControllerException
	 * @author YHY
	 * @date 2015年7月22日 上午11:17:53
	 * @version V1.0
	 */
	protected void checkViewParameter(IView view)
			throws ControllerParamInvalidException {
		if (view == null) {
			throw new ControllerParamInvalidException("程序执行错误，传递参数不能为空。");
		}
	}


	/**
	 * 创建组合关系
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public @ResponseBody
	Object create(@RequestBody MetamodelRequestData metamodelRequestData) throws Exception {
		try {
			String fromMID = metamodelRequestData.getId();
			//IContext paramContext = ContextFactoryImpl.getInstance().createContextWithID(fromMID);
			//metaModelCompService.deleteAllComp(paramContext);
			List<MetaModelBasicView> modelList = metamodelRequestData.getModelList();
			for(MetaModelBasicView mmodel : modelList) {
				MetaModelCompBasicView view = new MetaModelCompBasicView();
				view.setId(UUID.randomUUID().toString());
				view.setFromMID(fromMID);
				view.setToMID(mmodel.getId());
				view.setOwnerMultiplicity("1");
				view.setToMultiplicity(metamodelRequestData.getToMultiplicity());
				// 校验参数
				this.checkViewParameter(view);
				// 构造上下文（异步响应）
				IContext context = ContextFactoryImpl.getInstance()
						.createDifferResponseContextWithView(view);
				// 调用服务层的方法获取响应
				IResponse response = metaModelCompService.create(context);
			}
			// 返回结果
			return new ModelAndViewResult(
					ResultCode.RESULT_CODE_SUCCESS, "组合关系创建成功",
					null);
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 删除组合关系
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody
	Object delete(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		try {
			IContext context = ContextFactoryImpl
					.getInstance()
					.createDifferResponseContextWithID(metamodelRequestData.getId());
			IResponse response = this.metaModelCompService.delete(context);
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 修改组合关系
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public @ResponseBody
	Object update(@RequestBody MetaModelCompBasicView view) throws Exception {
		try {
				// 校验参数
				this.checkViewParameter(view);
				// 构造上下文（异步响应）
				IContext context = ContextFactoryImpl.getInstance()
						.createDifferResponseContextWithView(view);
				// 调用服务层的方法获取响应
				IResponse response = metaModelCompService.update(context);
			// 返回结果
			return new ModelAndViewResult(
					ResultCode.RESULT_CODE_SUCCESS, "组合关系更新成功",
					null);
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}





}
