<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.1.xsd
      ">
    <context:annotation-config />

<!--    <import resource="beans/hibernate/hibernate.xml" />
    <import resource="beans/configurer.xml" />
    <import resource="beans/analyzer/beans.xml" />-->
    <!--全链分析 -->
    <bean id="job_link"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="offLineAnalyzer" />
        </property>
        <property name="targetMethod" value="startAnalyzer" />
        <property name="concurrent" value="true" /><!-- 作业不并发调度 -->
    </bean>
    <!--全链分析 -->
    <bean id="job_link_Trigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="job_link" />
        <property name="startDelay" value="0" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
        <property name="repeatInterval" value="12000000" /><!-- 毫秒级计算,1800000==每30分钟调度一次 -->
    </bean>



    <bean id="job"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="dataMapQueryService" />
        </property>
        <property name="targetMethod" value="getDataMapAnalyse" />
        <property name="concurrent" value="true" /><!-- 作业不并发调度 -->
    </bean>

    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="job" />
        <property name="startDelay" value="0" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
        <property name="repeatInterval" value="36000000" /><!-- 毫秒级计算,900000==每15分钟调度一次 -->
    </bean>

    <bean id="timerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
        <property name="triggers"> 
            <list>
                <ref local="job_link_Trigger"/>
                <ref local="simpleTrigger"/>
                <ref local="simpleTrigger_dbbak"/>
				
            </list>
        </property>
    </bean>
	



<!--备份数据库配置-->
    <bean id="dbbakjob"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="metaDataDbBackupService" />
        </property>
        <property name="targetMethod" value="backupDb" />
        <property name="concurrent" value="true" /><!-- 作业不并发调度 -->
    </bean>

    <bean id="simpleTrigger_dbbak" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="dbbakjob" />
        <property name="startDelay" value="0" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
        <property name="repeatInterval" value="36000000" /><!-- 毫秒级计算,900000==每15分钟调度一次 -->
    </bean>
    
    
    
    <!--动态触发器   org.springframework.scheduling.quartz.CronTriggerBean-->			     
   <!--  <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="dbBackUpJob"/>
    	<property name="cronExpression" value="0 0 12 * * ?"/>
    </bean> -->
    <!-- 我的调度工厂 -->
    <bean id="mySchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
		<property name="triggers"> 
            <list>
				<ref local="customCronTrigger" />
            </list>
        </property>
	</bean>
    <!-- 自定义触发器 -->
	<bean id="customCronTrigger" class="com.gilight.dep.metadata.service.impl.CustomCronTrigger">
		<property name="jobDetail" ref="myJobDetail" /> 
		<property name="initBackupTimeService" ref="initBackupTimeService"></property>
	</bean>
    <!-- 动态备份系统jobDetail -->
    <bean id="myJobDetail"  
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject">
            <ref bean="systemBackupService" />
        </property>
        <property name="targetMethod" value="backupSystem" />
        <property name="concurrent" value="false" /><!-- 作业不并发调度 -->
    </bean> 
    <!--备份数据库配置end-->



    <!-- <import resource="beans/beans.xml" /> -->
    <!-- 开启controller注解支持 -->
    <!-- 注：如果base-package=com.avicit 则注解事务不起作用 TODO 读源码 -->
    <!-- <context:component-scan base-package="com.jhkj.demp.controller.topologic.*">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"
        /> <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"
        /> </context:component-scan> -->



    <!-- 	<import resource="security/configurer.xml" />

        <import resource="beans/cache.xml" />
         -->

    <!-- 系统备份业务 -->
    <bean id="systemBackupService" class="com.gilight.dep.metadata.service.impl.SystemBackupServiceImpl">
        <property name="systemBackupRepository" ref="systemBackupRepository"></property>
        <property name="metaDataDbBackupService" ref="metaDataDbBackupService"></property>
        <property name="mySchedulerFactoryBean" ref="mySchedulerFactoryBean"></property>
        <property name="customCronTrigger" ref="customCronTrigger"></property>
        <property name="myJobDetail" ref="myJobDetail"></property>
    </bean>

</beans>
