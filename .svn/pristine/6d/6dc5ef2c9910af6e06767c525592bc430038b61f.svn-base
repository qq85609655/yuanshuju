package com.gilight.dep.metadata.message.consumer;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.ContextImpl;
import com.gilight.dep.framework.core.context.base.DomainMessageContext;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.exception.GilightException;
import com.gilight.dep.framework.core.message.consumer.AbstractConsumer;
import com.gilight.dep.framework.core.message.consumer.IMessageConsumer;
import com.gilight.dep.metadata.repository.IMetaDataBaseRepository;
import com.jdon.annotation.Consumer;
import org.springframework.beans.factory.annotation.Autowired;
@Consumer("createCompMetaData")
public class MetaDataCompCreateMessageConsumer extends AbstractConsumer implements
IMessageConsumer{
//
	@Autowired
	private IMetaDataBaseRepository repository;
	


	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	

	public void executeEvent(DomainMessageContext dmContext) throws Exception {
		//IContext context = ContextFactoryImpl.getInstance().createContext(ContextImpl.class, dmContext);
		//repository.createCompMetaData(context);
		new Startbat(dmContext).start();

	}

	public class Startbat  extends Thread{
		DomainMessageContext dmContext;
		Startbat(DomainMessageContext dmContext){
			this.dmContext=dmContext;
		}

		public void run() {
			try {
				IContext context = ContextFactoryImpl.getInstance().createContext(ContextImpl.class, dmContext);
				repository.createCompMetaData(context);
			} catch (GilightException e) {
				dmContext.getResponse().setResult(ResultFactory.getInstance().createFailedResult(e));

			}
		}
	}

	public IMetaDataBaseRepository getRepository() {
		return repository;
	}
}
