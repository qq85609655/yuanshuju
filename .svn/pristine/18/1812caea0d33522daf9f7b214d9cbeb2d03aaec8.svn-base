package com.gilight.dep.metadata.repository.impl;

import java.util.ArrayList;
import java.util.List;

import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.ParameterKeys;
import com.gilight.dep.framework.core.context.request.parameter.impl.EntityParameters;
import com.gilight.dep.framework.core.context.request.parameter.impl.IDParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.exception.DaoException;
import com.gilight.dep.framework.core.exception.ModelException;
import com.gilight.dep.framework.core.exception.RepositoryException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.model.IBasicModel;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.metadata.dao.IAnalyseExcuteDao;
import com.gilight.dep.metadata.entity.MdAnalyseResult;
import com.gilight.dep.metadata.entity.MdComposition;
import com.gilight.dep.metadata.entity.MdDependency;
import com.gilight.dep.metadata.entity.MdMetadata;
import com.gilight.dep.metadata.entity.MmComposition;
import com.gilight.dep.metadata.entity.MmDependency;
import com.gilight.dep.metadata.entity.MmInherit;
import com.gilight.dep.metadata.entity.MmMetamodel;
import com.gilight.dep.metadata.enums.MdAnalyseResultParam;
import com.gilight.dep.metadata.repository.IAnalyseExcuteRepository;

public class AnalyseExcuteRepositoryImpl extends MetaDataRepositoryImpl implements IAnalyseExcuteRepository{
	private IAnalyseExcuteDao analyseExcuteDao;
	
	
	
	public IAnalyseExcuteDao getAnalyseExcuteDao() {
		return analyseExcuteDao;
	}

	public void setAnalyseExcuteDao(IAnalyseExcuteDao analyseExcuteDao) {
		this.analyseExcuteDao = analyseExcuteDao;
	}

	public AnalyseExcuteRepositoryImpl() {
		// TODO Auto-generated constructor stub
	}


	@Override
	public IResponse create(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IContext<IBasicModel> cxt = paramIContext;
			IBasicModel model = (IBasicModel) cxt.getParameter(ParameterKeys.ATT_MODEL);
//				Session session = (Session) cxt.getParameter("session");
			analyseExcuteDao.save(model.getData()/*,session*/);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessResult(null));
			return paramIContext.getResponse();
			} catch (DaoException | ModelException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				new RepositoryException("创建元模型失败!-dao");
			}
			
		return paramIContext.getResponse();
	}

	@Override
	public IResponse update(IContext paramIContext) throws RepositoryException {
		try {
			IContext<IBasicModel> cxt = paramIContext;
			IBasicModel model = (IBasicModel) cxt.getParameter(ParameterKeys.ATT_MODEL);
//			Session session = (Session) cxt.getParameter("session");
			analyseExcuteDao.update(model.getData()/*,session*/);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessResult(null));
			return paramIContext.getResponse();
		} catch (DaoException | ModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("更新元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}

	@Override
	public IResponse delete(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IContext<IBasicModel> cxt = paramIContext;
			IBasicModel model = (IBasicModel) cxt.getParameter(ParameterKeys.ATT_MODEL);
//			Session session = (Session) cxt.getParameter("session");
			analyseExcuteDao.delete(model.getData()/*,session*/);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessResult(null));
			return paramIContext.getResponse();
		} catch (DaoException | ModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("更新元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}



	@Override
	public IResponse getById(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IDParameters idp = (IDParameters) paramIContext.getParameters();
			//EntityParameters mme=(MmMetamodel)entityParameters.getEntity();
			String id = idp.getId();
			//metaModelBasicDao.getById(mme.getId(),MmMetamodel.class);
			MmMetamodel mme=(MmMetamodel) analyseExcuteDao.findById(id,MmMetamodel.class);
			paramIContext.getResponse().setResult(ResultFactory.getInstance().createSuccessResult(mme));
			
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("查询元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}

	@Override
	public IResponse getByScope(IContext paramIContext)
			throws RepositoryException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public MmMetamodel getModelByid(String id) throws RepositoryException{
		// TODO Auto-generated method stub
		try {
			MmMetamodel mm=(MmMetamodel)analyseExcuteDao.findById(id, MmMetamodel.class);
			return mm;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	
	}

	@Override
	public MmMetamodel getModelByCode(String code) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<IEntity> mmlist=analyseExcuteDao.findByProperty("mmCode",code, MmMetamodel.class);
			if(mmlist==null||mmlist.size()==0){
				throw new RepositoryException("没有相应元模型=="+code);
			}
			MmMetamodel mm = (MmMetamodel) mmlist.get(0);
			return mm;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
		
	}

	@Override
	public List<MmInherit> getMmInheritByfromid(String fromid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmInherit> milist = new ArrayList<MmInherit>();
			List<IEntity> list=analyseExcuteDao.findByProperty("parentId", fromid, MmInherit.class);
			for (IEntity iEntity : list) {
				MmInherit mi = (MmInherit)iEntity;
				milist.add(mi);
			}
			return milist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	}

	@Override
	public List<MmComposition> getMmCompositionByfromid(String fromid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmComposition> milist = new ArrayList<MmComposition>();
			List<IEntity> list=analyseExcuteDao.findByProperty("fromMmId", fromid, MmDependency.class);
			for (IEntity iEntity : list) {
				MmComposition mi = (MmComposition)iEntity;
				milist.add(mi);
			}
			return milist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	}

	@Override
	public List<MmDependency> getMmDependencyByfromid(String fromid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmDependency> milist = new ArrayList<MmDependency>();
			List<IEntity> list=analyseExcuteDao.findByProperty("fromMmId", fromid, MmDependency.class);
			for (IEntity iEntity : list) {
				MmDependency mi = (MmDependency)iEntity;
				milist.add(mi);
			}
			return milist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	}

	@Override
	public MmMetamodel getMetaModel(String mdid) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			MdMetadata md = (MdMetadata) analyseExcuteDao.findById(mdid, MdMetadata.class);
			String mmid=md.getMmId();
			MmMetamodel mm=(MmMetamodel) analyseExcuteDao.findById(mmid, MmMetamodel.class);
			return mm;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
		
	}

	@Override
	public List<MdDependency> getMetaDataDepe(String mdid) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findByProperty("fromMdId", mdid, MdDependency.class);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
		
	}

	@Override
	public List<MdComposition> getMetaDataComp(String mdid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdComposition> complist = new ArrayList<MdComposition>();
			List<IEntity> mdcplist = analyseExcuteDao.findByProperty("fromMdId", mdid, MdComposition.class);
			for (IEntity iEntity : mdcplist) {
				MdComposition mdcp = (MdComposition)iEntity;
				complist.add(mdcp);
			}
			return complist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdMetadata> getMetaDataByMmid(String mmid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdMetadata> mdlist = new ArrayList<MdMetadata>();
			List<IEntity> list = analyseExcuteDao.findByProperty("mmId", mmid, MdMetadata.class);
			for (IEntity iEntity : list) {
				MdMetadata md = (MdMetadata)iEntity;
				mdlist.add(md);
			}
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdMetadata> getMetaDataByMmid(String mmid,List<String> ids)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdMetadata> mdlist = new ArrayList<MdMetadata>();
			List<IEntity> list = analyseExcuteDao.findMetaDataByIdList(ids,mmid);
			
			for (IEntity iEntity : list) {
				MdMetadata md = (MdMetadata)iEntity;
				mdlist.add(md);
			}
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	public List<MmDependency> getMetaModelDepeByName(String name)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmDependency> depelist = new ArrayList<MmDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findByProperty("name", name, MmDependency.class);
			for (IEntity iEntity : mddepelist) {
				MmDependency mddepe = (MmDependency)iEntity;
				depelist.add(mddepe);
			}
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdDependency> findMetaDataDepeByIdList(List<String> idlist,
			List<String> toidlist)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findMetaDataDepeByIdList(idlist, toidlist);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdDependency> getMetaDataDepeById(List<String> mmids)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findByIdList(mmids,MdDependency.class);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	
	}
	@Override
	public List<MdDependency> getMetaDataDepeByMmId(List<String> mmids)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			//List<IEntity> mddepelist = analyseExcuteDao.findByIdList(mmids,MdDependency.class);
			List<IEntity> mddepelist = analyseExcuteDao.findByParamList("mmDepId", mmids, MdDependency.class);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	
	}
	@Override
	public List<MdDependency> getMetaDataTargetDepe(String sourceid,
			String depeid) throws RepositoryException {
		// TODO Auto-generated method stub
		
		try {
			//List<MdDependency> 
			
			String hql="from "+MdDependency.class.getName()+" where fromMdId='"+sourceid+"' and mmDepId='"+depeid+"'";
			List<IEntity> list=analyseExcuteDao.findByHQL(hql);
			MdDependency[] mds= (MdDependency[]) list.toArray(new MdDependency[list.size()]);
			List<MdDependency> mdlist=new ArrayList<MdDependency>();
			for (MdDependency mdDependency : mds) {
				mdlist.add(mdDependency);
			}
			
			//mdlist.addAll(mds);
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
		
	}

	@Override
	public MdMetadata getMetaDataByMdid(String mdid) throws RepositoryException {
		// TODO Auto-generated method stub
		MdMetadata md;
		try {
			md = (MdMetadata) analyseExcuteDao.findById(mdid, MdMetadata.class);
			return md;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
		
	}

	@Override
	public void resultStatus() throws RepositoryException {
		// TODO Auto-generated method stub

		try {
			String hql="delete "+MdAnalyseResult.class.getName()+" s where s.status="+MdAnalyseResultParam.yes;
			analyseExcuteDao.executehql(hql);
			hql="update "+MdAnalyseResult.class.getName()+" s set s.status="+MdAnalyseResultParam.yes +"where s.status="+MdAnalyseResultParam.no ;
			analyseExcuteDao.executehql(hql);
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public List<MdDependency> getMetaDataTargetDepeByToid(String toid,
			String depeid) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			//List<MdDependency> 
			String hql="from "+MdDependency.class.getName()+" where toMdId='"+toid+"' and mmDepId='"+depeid+"'";
			List<IEntity> list=analyseExcuteDao.findByHQL(hql);
			MdDependency[] mds= (MdDependency[]) list.toArray(new MdDependency[list.size()]);
			List<MdDependency> mdlist=new ArrayList<MdDependency>();
			for (MdDependency mdDependency : mds) {
				mdlist.add(mdDependency);
			}
			
			//mdlist.addAll(mds);
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}
	
	
	

}
