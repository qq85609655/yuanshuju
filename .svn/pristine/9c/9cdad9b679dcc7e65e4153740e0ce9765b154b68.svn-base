/**   
* @Title: MetadataControllerTest.java  
* @Description: 模拟控制器构造返回数据 
* @author YHY   
* @date 2015年7月22日 上午10:29:11
* @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
* @version V1.0   
*/
package com.gilight.dep.metadata.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.gilight.dep.metadata.view.PackageBasicView;
import com.gilight.dep.metadata.view.PackageFolderBasicView;
import com.gilight.dep.metadata.web.request.ViewRequestDataSimulate;
import com.gilight.dep.metadata.web.response.ResponseResult;
import com.gilight.dep.metadata.web.response.ResultCode;


@RequestMapping("/view")
public class ViewControllerSimulate {
	
	/**
	 * 获取所有视图
	* <p><br>
	* @param ViewRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-14 下午6:05:31
	* @version V1.0
	 */
	@RequestMapping(value = "/getAll", method = RequestMethod.GET)
	public @ResponseBody
	Object getAll(@ModelAttribute ViewRequestDataSimulate viewRequestData)
			throws Exception {
		//测试数据
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		for(int i=1;i<4;i++){
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", i);
			map.put("text", "视图_"+i);
			map.put("leaf", false);
			map.put("expanded", false);
			map.put("type", 1);
			list.add(map);
		}
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取所有视图成功",list);
	}
	
	
	/**
	 * 根据类型（系统or用户）获取相应视图
	* <p><br>
	* @param ViewRequestData
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2015年7月25日 下午1:41:18
	* @version V1.0
	 */
	@RequestMapping(value = "/findByType", method = RequestMethod.GET)
	public @ResponseBody
	Object findByType(@ModelAttribute ViewRequestDataSimulate viewRequestData)
			throws Exception {
		//测试数据
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		if("system".equals(viewRequestData.getViewType())) {
			for(int i=1;i<4;i++){
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id", i);
				map.put("text", "测试系统视图_"+i);
				map.put("leaf", true);
				map.put("expanded", false);
				map.put("nodeType", 1);
				list.add(map);
			}
		}else if("custom".equals(viewRequestData.getViewType())) {
			for(int i=1;i<4;i++){
				Map<String, Object> map = new HashMap<String, Object>();
				
				
				map.put("id", i);
				map.put("text", "测试自定义视图_"+i);
				map.put("leaf", false);
				map.put("expanded", false);
				map.put("nodeType", 1);
				list.add(map);
			}
		}
		
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取类型视图成功", list);
	}
	
	/**
	 * 根据视图Id查询文件夹
	* <p><br>
	* @param ViewRequestData
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2015-7-27 上午9:45:31
	* @version V1.0
	 */
	@RequestMapping(value = "/findFolderByViewId", method = RequestMethod.GET)
	public @ResponseBody
	Object findFolderByViewId(@ModelAttribute ViewRequestDataSimulate viewRequestData)
			throws Exception {
		//测试数据
		String viewId = viewRequestData.getViewId();
		String nodeType = viewRequestData.getNodeType();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		if("2".equals(nodeType)) {
			return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",list);
		}		
		if("1".equals(viewId)&&"1".equals(nodeType)) {
				Map<String, Object> folder = new HashMap<String, Object>();
				folder.put("id", "101");
				folder.put("text", "1文件夹");
				folder.put("leaf", false);
				folder.put("expanded", false);
				folder.put("nodeType", "2");
				list.add(folder);
		}else if("2".equals(viewId)&&"1".equals(nodeType)) {
			for(int i=1;i<4;i++){
				Map<String, Object> folder = new HashMap<String, Object>();
				folder.put("id", "20"+i);
				folder.put("text", "2文件夹"+i);
				folder.put("leaf", false);
				folder.put("expanded", false);
				folder.put("nodeType", "2");
				list.add(folder);
			}
		}
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取子文件夹成功", list);
	}
	
	/**
	 * 添加用户自定义视图，并保存用户上传的图标文件
	* <p><br>
	* @param file
	* @param view
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2015年7月27日 下午4:08:48
	* @version V1.0
	 */
	@RequestMapping(value = "/addView", method = RequestMethod.POST)
	public @ResponseBody
	Object addView(@RequestParam("file") /*CommonsMultipartFile*/String file,
			@RequestParam("viewName") String viewName, 
			@RequestParam("viewType") String viewType,
			@RequestParam("remark") String remark) throws Exception {
		//TODO 图标文件的上传保存处理
		System.out.println("-------------icon file name:-------------");
		System.out.println(file);
		PackageBasicView view = new PackageBasicView();
		view.setViewName(viewName);
		view.setViewType(viewType);
		view.setRemark(remark);
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "添加视图到控制层成功", view);
	}
	
	/**
	 * 添加用户自定义视图，并保存用户上传的图标文件
	* <p><br>
	* @param file
	* @param view
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2015年7月27日 下午4:08:48
	* @version V1.0
	 */
	@RequestMapping(value = "/editView", method = RequestMethod.POST)
	public @ResponseBody
	Object editView(@RequestParam("file") /*CommonsMultipartFile*/String file,
			@RequestParam("viewName") String viewName, 
			@RequestParam("viewType") String viewType,
			@RequestParam("remark") String remark) throws Exception {
		//TODO 图标文件的上传保存处理
		System.out.println("---------edit icon file name:-------------");
		System.out.println(file);
		PackageBasicView view = new PackageBasicView();
		view.setViewName(viewName);
		view.setViewType(viewType);
		view.setRemark(remark);
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "修改视图到控制层成功", view);
	}

	/**
	 * 删除视图
	* <p><br>
	* @param id
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2015年7月27日 下午5:55:21
	* @version V1.0
	 */
	@RequestMapping(value = "/deleteView", method = RequestMethod.POST)
	public @ResponseBody
	Object deleteView(@RequestParam("id") String id) throws Exception {
		
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "删除视图到控制层成功", id);
	}
	
	/**
	 * 添加子文件夹
	* <p><br>
	* @param file
	* @param name
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2015年7月27日 下午6:39:19
	* @version V1.0
	 */
	@RequestMapping(value = "/addFolder", method = RequestMethod.POST)
	public @ResponseBody
	Object addFolder(@RequestParam("file") /*CommonsMultipartFile*/String file,
			@RequestParam("name") String name) throws Exception {
		//TODO 图标文件的上传保存处理
		PackageFolderBasicView view = new PackageFolderBasicView();
		view.setName(name);
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "添加子文件夹到控制层成功", view);
	}
	
	/**
	 * 修改子文件夹
	 * <p><br>
	 * @param file
	 * @param name
	 * @return
	 * @throws Exception  
	 * @author hww 
	 * @date 2015年7月27日 下午6:39:19
	 * @version V1.0
	 */
	@RequestMapping(value = "/editFolder", method = RequestMethod.POST)
	public @ResponseBody
	Object editFolder(@RequestParam("file") /*CommonsMultipartFile*/String file,
			@RequestParam("name") String name) throws Exception {
		//TODO 图标文件的上传保存处理
		PackageFolderBasicView view = new PackageFolderBasicView();
		view.setName(name);
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "修改子文件夹到控制层成功", view);
	}
	
	/**
	 * 删除子文件夹
	 * <p><br>
	 * @param id
	 * @return
	 * @throws Exception  
	 * @author hww 
	 * @date 2015年7月27日 下午5:55:21
	 * @version V1.0
	 */
	@RequestMapping(value = "/deleteFolder", method = RequestMethod.POST)
	public @ResponseBody
	Object deleteFolder(@RequestParam("id") String id) throws Exception {
		
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "删除子文件夹到控制层成功", id);
	}
}
