package com.gilight.dep.metamodel.init.data.phys;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.gilight.dep.metadata.enums.DepeSourceParam;
import com.gilight.dep.metadata.view.MetaModelBasicView;
import com.gilight.dep.metadata.view.MetaModelCompView;
import com.gilight.dep.metadata.view.MetaModelDepeView;
import com.gilight.dep.metadata.view.MetaModelView;
import com.gilight.dep.metamodel.init.data.MetaModelInitFactory;
import com.gilight.dep.metamodel.init.data.common.MetaModelCommonFactory;

public class MetaModelPyhsMapFactory extends MetaModelInitFactory {

	private static Map<String, MetaModelView> metaModel = new HashMap<String, MetaModelView>();

	public static void main(String[] args) {
		init();
		System.out.println(metaModel.size());
	}

	public static Map<String, MetaModelView> getMetaModel() {
		metaModel.clear();
		init();
		return metaModel;
	}

	private static void init() {
		// TODO Auto-generated method stub
		MetaModelPyhsMapFactory.setDepPkgMapping();
		MetaModelPyhsMapFactory.setDepTableMapping();
		MetaModelPyhsMapFactory.setDepColumnMapping();
	}

	private static void putCache(MetaModelView m) {
		// TODO Auto-generated method stub
		if (!metaModel.containsKey(m.getCode())) {
			metaModel.put(m.getCode(), m);
		} else {
			System.out.println("---------" + (m.getCode()));
		}
	}

	private static MetaModelView getCache(String code) {
		// TODO Auto-generated method stub
		if (metaModel.containsKey(code)) {
			return metaModel.get(code);
		}
		return null;
	}

	// 映射小类 DepPkgMapping 否 DepPkgClassiSub
	public static String DepPkgMapping = "DepPkgMapping";

	public static MetaModelView setDepPkgMapping() {
		String name = "映射小类";
		MetaModelView m = getCache(DepPkgMapping);
		if (m == null) {
			m = getSystemMetaModel(DepPkgMapping, name);
		}
		m.setIsabstract(false);
		// 设置父类
		List<MetaModelBasicView> parentModelList = new ArrayList<MetaModelBasicView>();
		parentModelList.add(MetaModelCommonFactory.setDepPkgClassiSub());
		m.setParentModelList(parentModelList);

		// 设置组合关系
		List<MetaModelCompView> compList = new ArrayList<MetaModelCompView>();
		// 组合转换
		MetaModelCompView comview = getMetaModelCompView(m, setDepTransform());
		compList.add(comview);
		// 组合表对象映射
		MetaModelCompView comview2 = getMetaModelCompView(m,
				setDepTableMapping());
		compList.add(comview2);
		m.setCompList(compList);

		putCache(m);
		return m;
	}

	// 转换
	public static String DepTransform = "DepTransform";

	public static MetaModelView setDepTransform() {
		String name = "转换";
		MetaModelView m = getCache(DepTransform);
		if (m == null) {
			m = getSystemMetaModel(DepTransform, name);
		}
		m.setIsabstract(false);
		// 设置属性
		// 设置父类
		List<MetaModelBasicView> parentModelList = new ArrayList<MetaModelBasicView>();
		parentModelList.add(MetaModelCommonFactory.setDepModelElement());
		m.setParentModelList(parentModelList);

		// 设置组合关系
		List<MetaModelCompView> compList = new ArrayList<MetaModelCompView>();
		// 组合转换
		MetaModelCompView comview = getMetaModelCompView(m,
				setDepTableMapping());
		compList.add(comview);
		m.setCompList(compList);

		putCache(m);
		return m;
	}

	// 表文件对象映射 DepTableMapping 否 ClassifierMap
	public static String DepTableMapping = "DepTableMapping";

	public static MetaModelView setDepTableMapping() {
		String name = "表文件对象映射";
		MetaModelView m = getCache(DepTableMapping);
		if (m == null) {
			m = getSystemMetaModel(DepTableMapping, name);
		}
		m.setIsabstract(false);
		// 设置属性
		// 设置父类
		List<MetaModelBasicView> parentModelList = new ArrayList<MetaModelBasicView>();
		parentModelList.add(MetaModelCommonFactory.setDepModelElement());
		m.setParentModelList(parentModelList);

		// 设置组合关系
		List<MetaModelCompView> compList = new ArrayList<MetaModelCompView>();
		// 组合转换
		MetaModelCompView comview = getMetaModelCompView(m,
				setDepColumnMapping());
		compList.add(comview);
		m.setCompList(compList);

		// 设置依赖关系
		List<MetaModelDepeView> depeList = new ArrayList<MetaModelDepeView>();
		// 数据集的依赖
		MetaModelDepeView depe1 = getMetaModelDepeView(m,
				MetaModelCommonFactory.setDepModelElement());
		depe1.setName(DepeSourceParam.depsource);
		depeList.add(depe1);
		MetaModelDepeView depe2 = getMetaModelDepeView(m,
				MetaModelCommonFactory.setDepModelElement());
		depe2.setName(DepeSourceParam.deptarget);
		depeList.add(depe2);
		m.setDepeList(depeList);

		putCache(m);
		return m;
	}

	// 字段属性映射 DepColumnMapping 否 FeatureMap
	public static String DepColumnMapping = "DepColumnMapping";

	public static MetaModelView setDepColumnMapping() {
		String name = "字段属性映射";
		MetaModelView m = getCache(DepColumnMapping);
		if (m == null) {
			m = getSystemMetaModel(DepColumnMapping, name);
		}
		m.setIsabstract(false);
		// 设置属性
		// 设置父类
		List<MetaModelBasicView> parentModelList = new ArrayList<MetaModelBasicView>();
		parentModelList.add(MetaModelCommonFactory.setDepModelElement());
		m.setParentModelList(parentModelList);
		putCache(m);
		// 设置依赖关系
		List<MetaModelDepeView> depeList = new ArrayList<MetaModelDepeView>();
		// 数据集的依赖
		MetaModelDepeView depe1 = getMetaModelDepeView(m,
				MetaModelCommonFactory.setDepModelElement());
		depe1.setName(DepeSourceParam.source);
		depeList.add(depe1);
		MetaModelDepeView depe2 = getMetaModelDepeView(m,
				MetaModelCommonFactory.setDepModelElement());
		depe2.setName(DepeSourceParam.target);
		depeList.add(depe2);
		m.setDepeList(depeList);
		return m;
	}
}
