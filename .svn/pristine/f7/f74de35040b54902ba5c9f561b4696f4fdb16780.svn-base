/**   
 * @Title: MetamodelController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.view.IView;
import com.gilight.dep.framework.core.controller.BaseController;
import com.gilight.dep.framework.core.exception.ControllerException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.exception.param.ControllerParamInvalidException;
import com.gilight.dep.metadata.scope.MetaDataScope;
import com.gilight.dep.metadata.scope.MetaModelScope;
import com.gilight.dep.metadata.view.GatherJobFileView;
import com.gilight.dep.metadata.view.MetaModelView;
import com.gilight.dep.metadata.web.request.MetamodelRequestData;
import com.gilight.dep.metamodel.service.IMetaModelBasicService;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;

@RequestMapping("/metamodel")
public class MetamodelController extends BaseController {

	private IMetaModelQueryService metaModelQueryService;
	public IMetaModelQueryService getMetaModelQueryService() {
		return metaModelQueryService;
	}

	public void setMetaModelQueryService(
			IMetaModelQueryService metaModelQueryService) {
		this.metaModelQueryService = metaModelQueryService;
	}

	private IMetaModelBasicService metaModelBasicService;

	public IMetaModelBasicService getMetaModelBasicService() {
		return metaModelBasicService;
	}

	public void setMetaModelBasicService(IMetaModelBasicService metaModelBasicService) {
		this.metaModelBasicService = metaModelBasicService;
	}

	/**
	 *
	 * <p>
	 * 检查view 参数<br>
	 *
	 * @throws ControllerException
	 * @author YHY
	 * @date 2015年7月22日 上午11:17:53
	 * @version V1.0
	 */
	protected void checkViewParameter(IView view)
			throws ControllerParamInvalidException {
		if (view == null) {
			throw new ControllerParamInvalidException("程序执行错误，传递参数不能为空。");
		}
	}
	/**
	 * 根据模型Id获取元模型中定义的属性
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/getProps", method = RequestMethod.POST)
	public @ResponseBody
	Object getProps(@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl
				.getInstance()
				.createDifferResponseContextWithID(metamodelRequestData.getId());
		this.metaModelQueryService.getModelAttrsByMid(context);
		return context.getResponse().getResult();
	}

	/**
	 * 获取所有的模型列表
	 * <p>
	 * <br>
	 * 
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/getList", method = RequestMethod.POST)
	public @ResponseBody
	Object getList(@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		MetaModelScope scope = new MetaModelScope();
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(scope);
		this.metaModelQueryService.getByScope(context);
		return context.getResponse().getResult();
	}

	/**
	 * 获取所有非抽象的元模型
	 * <p>
	 * <br>
	 * 
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/getAll", method = RequestMethod.POST)
	public @ResponseBody
	Object getAll() throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(null);
		this.metaModelQueryService.getAllModels(context);
		return context.getResponse().getResult();
	}
	/**
	 * 获取所有的元模型，包括抽象的和非抽象的元模型
	* <p><br>
	* @return
	* @throws Exception  
	* @author hww 
	* @date 2016年1月21日 下午4:48:32
	* @version V1.0
	 */
	@RequestMapping(value = "/getAllMetaModels", method = RequestMethod.POST)
	public @ResponseBody
	Object getAllMetaModels() throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(null);
		this.metaModelQueryService.getAllMetaModels(context);
		return context.getResponse().getResult();
	}

	/**
	 * 根据模型ID获取子模型列表
	 * <p>
	 * <br>
	 * 
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-22 下午6:27:17
	 * @version V1.0
	 */
	@RequestMapping(value = "/getChildrens", method = RequestMethod.POST)
	public @ResponseBody
	Object getChildrens(
			@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl
				.getInstance()
				.createDifferResponseContextWithID(metamodelRequestData.getId());
		this.metaModelQueryService.getChildModels(context);
		return context.getResponse().getResult();
	}

	/**
	 * 根据元模型Id查询定义好的依赖元模型
	 * <p>
	 * <br>
	 * 
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-22 下午6:27:17
	 * @version V1.0
	 */
	@RequestMapping(value = "/getDependMM", method = RequestMethod.POST)
	public @ResponseBody
	Object getDependMM(@ModelAttribute MetamodelRequestData metamodelRequestData)
			throws Exception {
		IContext context = ContextFactoryImpl
				.getInstance()
				.createDifferResponseContextWithID(metamodelRequestData.getId());
		this.metaModelQueryService.getDepeAsso(context);
		return context.getResponse().getResult();
	}



	/**
	 * 创建元模型
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public @ResponseBody
	Object create(@RequestBody MetaModelView view) throws Exception {
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = metaModelBasicService.create(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			e.printStackTrace();
			throw new ControllerException(e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControllerException(e);
		}
	}

	/**
	 * 删除元模型
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody
	Object delete(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		try {
			IContext context = ContextFactoryImpl
					.getInstance()
					.createDifferResponseContextWithID(metamodelRequestData.getId());
			IResponse response = this.metaModelBasicService.delete(context);
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControllerException(e);
		}
	}

	/**
	 * 修改元模型
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public @ResponseBody
	Object update(@RequestBody MetaModelView view) throws Exception {
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = metaModelBasicService.update(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControllerException(e);
		}
	}

	/**
	 * 发布元模型
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/publishVer", method = RequestMethod.POST)
	public @ResponseBody
	Object publishVer(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		try {
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithID(
							metamodelRequestData.getId());
			IResponse response = metaModelBasicService.publishVer(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}
	/**
	 * 撤销已发布元模型
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2016-1-22 上午10:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/repealPublish", method = RequestMethod.POST)
	public @ResponseBody
	Object repealPublish(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		try {
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithID(metamodelRequestData.getId());
			IResponse response = metaModelBasicService.repealPublish(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}


	/**
	 * 查询元模型信息
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/queryModel", method = RequestMethod.POST)
	public @ResponseBody
	Object queryModel(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {

		return null;
	}

	/**
	 * 检索元模型
	 * <p>
	 * <br>
	 *
	 * @param metadataRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/queryModelList", method = RequestMethod.GET)
	public @ResponseBody
	Object queryModelList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		MetaModelScope scope = new MetaModelScope();
		scope.setMmName(metamodelRequestData.getName());
		scope.setMmCode(metamodelRequestData.getCode());
		
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(scope);
		this.metaModelQueryService.getByScope(context);
		return context.getResponse().getResult();
	}
	/**
	 * 保存元模型基本信息时先上传图元对应的图标文件
	 * <p>
	 * <br>
	 * 
	 * @param file
	 * @return
	 * @throws Exception
	 * @author hww
	 * @date 2016年1月12日17:56:39
	 * @version V1.0
	 */
	@RequestMapping(value = "/image/upload", method = RequestMethod.POST)
	public @ResponseBody
	Object importExcelFile(@RequestParam("file") MultipartFile file) throws Exception {
		GatherJobFileView view = new GatherJobFileView();
		view.setFile(file);
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithView(view);
		IResponse response = this.metaModelBasicService.upLoad(context);
		return response.getResult();
	}



}
