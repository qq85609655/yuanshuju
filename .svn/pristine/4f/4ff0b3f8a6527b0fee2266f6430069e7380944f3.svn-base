/**   
 * @Title: MetamodelController.java  
 * @Description: TODO 
 * @author Rao junjun   
 * @date 2015年7月14日 下午4:34:54
 * @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
 * @version V1.0   
 */
package com.gilight.dep.metadata.web.controller;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.IParameters;
import com.gilight.dep.framework.core.context.request.parameter.impl.ViewParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.ModelAndViewResult;
import com.gilight.dep.framework.core.context.response.view.IView;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.controller.BaseController;
import com.gilight.dep.framework.core.exception.ControllerException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.exception.param.ControllerParamInvalidException;
import com.gilight.dep.metadata.view.MetaModelEnumValueView;
import com.gilight.dep.metadata.view.MetaModelEnumView;
import com.gilight.dep.metadata.web.request.MetamodelRequestData;
import com.gilight.dep.metadata.web.response.ResultCode;
import com.gilight.dep.metamodel.service.IMetaModelEnumService;
import com.gilight.dep.metamodel.service.IMetaModelEnumValueService;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;

@RequestMapping("/metamodelenum")
public class MetamodelEnumController extends BaseController {
	/**
	 *
	 * <p>
	 * 检查view 参数<br>
	 *
	 * @throws ControllerException
	 * @author YHY
	 * @date 2015年7月22日 上午11:17:53
	 * @version V1.0
	 */
	protected void checkViewParameter(IView view)
			throws ControllerParamInvalidException {
		if (view == null) {
			throw new ControllerParamInvalidException("程序执行错误，传递参数不能为空。");
		}
	}
	private IMetaModelQueryService metaModelQueryService;
	public IMetaModelQueryService getMetaModelQueryService() {
		return metaModelQueryService;
	}

	public void setMetaModelQueryService(
			IMetaModelQueryService metaModelQueryService) {
		this.metaModelQueryService = metaModelQueryService;
	}

	private IMetaModelEnumService metaModelEnumService;

	private IMetaModelEnumValueService metaModelEnumValueService;

	public IMetaModelEnumValueService getMetaModelEnumValueService() {
		return metaModelEnumValueService;
	}

	public void setMetaModelEnumValueService(IMetaModelEnumValueService metaModelEnumValueService) {
		this.metaModelEnumValueService = metaModelEnumValueService;
	}

	public IMetaModelEnumService getMetaModelEnumService() {
		return metaModelEnumService;
	}

	public void setMetaModelEnumService(IMetaModelEnumService metaModelEnumService) {
		this.metaModelEnumService = metaModelEnumService;
	}


	/**
	 * 创建枚举
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public @ResponseBody
	Object create(@RequestBody MetaModelEnumView view) throws Exception {
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = metaModelEnumService.create(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 删除枚举
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody
	Object delete(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		try {
			IContext context = ContextFactoryImpl
					.getInstance()
					.createDifferResponseContextWithID(metamodelRequestData.getId());
			IResponse response = this.metaModelEnumService.delete(context);
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 修改枚举
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public @ResponseBody
	Object update(@RequestBody MetaModelEnumView view) throws Exception {
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = metaModelEnumService.update(context);
			// 返回结果
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 创建枚举的键值对（集合）
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/createvalue", method = RequestMethod.POST)
	public @ResponseBody
	Object createvalue(@RequestBody MetaModelEnumValueView view) throws Exception {
		try {
			//校验参数
			this.checkViewParameter(view);
			//构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = metaModelEnumValueService.create(context);
			// 返回结果
			return response.getResult();
			
		} catch (ServiceException e) {
			e.printStackTrace();
			throw new ControllerException(e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControllerException(e);
		}
	}

	/**
	 * 删除枚举
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/deletevalue", method = RequestMethod.POST)
	public @ResponseBody
	Object deletevalue(@RequestBody MetaModelEnumValueView view) throws Exception {
		try {
			IContext context = ContextFactoryImpl
					.getInstance()
					.createDifferResponseContextWithID(view.getId());
			IResponse response = this.metaModelEnumValueService.delete(context);
			return response.getResult();
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}

	/**
	 * 修改枚举
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-20 下午3:18:31
	 * @version V1.0
	 */
	@RequestMapping(value = "/updatevalue", method = RequestMethod.POST)
	public @ResponseBody
	Object updatevalue(@RequestBody MetaModelEnumValueView view) throws Exception {
		try {
			// 校验参数
			this.checkViewParameter(view);
			// 构造上下文（异步响应）
			IContext context = ContextFactoryImpl.getInstance()
					.createDifferResponseContextWithView(view);
			// 调用服务层的方法获取响应
			IResponse response = metaModelEnumValueService.update(context);
			// 返回结果
			return response.getResult();
			
		} catch (ServiceException e) {
			throw new ControllerException(e);
		} catch (Exception e) {
			throw new ControllerException(e);
		}
	}


	/**
	 * 枚举列表
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/findEnumList", method = RequestMethod.GET)
	public @ResponseBody
	Object findEnumList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithParams(null);
		context.getResponse().regiestResultHandler(
				new IResultHandler<List<MetaModelEnumView>>() {
					@Override
					public IResult<List<Map<String, Object>>> handle(
							IContext context, IResult<List<MetaModelEnumView>> result)
							throws IllegalAccessException,
							InvocationTargetException {
						List<Map<String, Object>> rootlist = new ArrayList<Map<String, Object>>();
						List<MetaModelEnumView> resultList = (List<MetaModelEnumView>) result
								.getResult();
						for (MetaModelEnumView rootModel : resultList) {
							Map<String, Object> map = new HashMap<String, Object>();
							map.put("id", rootModel.getId());
							map.put("name", rootModel.getName());
							map.put("remark", rootModel.getRemark());
							map.put("text", rootModel.getName());
							//map.put("issys", rootModel.getIssys()+"");
							map.put("leaf", false);
							map.put("expanded", false);
							map.put("nodeType", "enumNode");
							rootlist.add(map);
						}
						return new ModelAndViewResult(
								ResultCode.RESULT_CODE_SUCCESS, "获取枚举树形菜单根节点成功",
								rootlist);
					}
				});
		metaModelQueryService.findEnumList(context);
		return context.getResponse().getResult();
	}

	/**
	 * 获取子枚举列表
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-12-28 下午01:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/findSubEnumList", method = RequestMethod.GET)
	public @ResponseBody
	Object findSubEnumList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		return new ModelAndViewResult(ResultCode.RESULT_CODE_SUCCESS,
				"获取子枚举成功", new ArrayList());
	}
	/**
	 * 值列表
	 * <p>
	 * <br>
	 *
	 * @param metamodelRequestData
	 * @return
	 * @throws Exception
	 * @author Administrator
	 * @date 2015-7-14 下午6:06:11
	 * @version V1.0
	 */
	@RequestMapping(value = "/findEnumValueList", method = RequestMethod.GET)
	public @ResponseBody
	Object findEnumValueList(@ModelAttribute MetamodelRequestData metamodelRequestData) throws Exception {
		String id = metamodelRequestData.getId();
		IContext context = ContextFactoryImpl.getInstance()
				.createDifferResponseContextWithID(id);
		context.getResponse().regiestResultHandler(
				new IResultHandler<List<MetaModelEnumValueView>>() {
					@Override
					public IResult<List<Map<String, Object>>> handle(
							IContext context, IResult<List<MetaModelEnumValueView>> result)
							throws IllegalAccessException,
							InvocationTargetException {
						List<Map<String, Object>> nodelist = new ArrayList<Map<String, Object>>();
						List<MetaModelEnumValueView> resultList = (List<MetaModelEnumValueView>) result
								.getResult();
						for (MetaModelEnumValueView nodeModel : resultList) {
							Map<String, Object> map = new HashMap<String, Object>();
							map.put("id", nodeModel.getId());
							map.put("enumId", nodeModel.getEnumId());
							map.put("enumKey", nodeModel.getEnumKey());
							map.put("enumValue", nodeModel.getEnumValue());
							nodelist.add(map);
						}
						return new ModelAndViewResult(
								ResultCode.RESULT_CODE_SUCCESS, "获取枚举值集合成功",
								nodelist);
					}
				});
		metaModelQueryService.findEnumValueList(context);
		return context.getResponse().getResult();
	}

}
