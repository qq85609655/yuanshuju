package com.gilight.dep.metadata.service.impl;

import com.gilight.dep.framework.core.context.base.ContextFactoryImpl;
import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.IParameters;
import com.gilight.dep.framework.core.context.request.parameter.ParameterKeys;
import com.gilight.dep.framework.core.context.request.parameter.impl.IDParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.IResult;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.context.support.IResultHandler;
import com.gilight.dep.framework.core.exception.GilightException;
import com.gilight.dep.framework.core.exception.ModelException;
import com.gilight.dep.framework.core.exception.RepositoryException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.model.IBasicModel;
import com.gilight.dep.framework.core.model.IModel;
import com.gilight.dep.framework.core.model.IViewModel;
import com.gilight.dep.framework.core.model.entity.IDEntity;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.framework.core.service.impl.BasicServiceImpl;
import com.gilight.dep.framework.util.bean.SpringBeansUtils;
import com.gilight.dep.framework.util.common.UUIDGenerator;
import com.gilight.dep.metadata.entity.MdGatherDatasource;
import com.gilight.dep.metadata.entity.MdGatherDatasourceParam;
import com.gilight.dep.metadata.enums.DBSParam;
import com.gilight.dep.metadata.gather.common.DBConnParam;
import com.gilight.dep.metadata.gather.common.util.DBUtils;
import com.gilight.dep.metadata.model.MetaDataGatherDBSModel;
import com.gilight.dep.metadata.repository.IGatherDataScourceRepository;
import com.gilight.dep.metadata.scope.GatherDatasourceParamScope;
import com.gilight.dep.metadata.scope.GatherDatasourceScope;
import com.gilight.dep.metadata.scope.GatherJobScope;
import com.gilight.dep.metadata.service.IGatherDataScourceService;
import com.gilight.dep.metadata.service.IMetaDataBaseService;
import com.gilight.dep.metadata.util.AutoCopyObj;
import com.gilight.dep.metadata.view.*;
import org.apache.log4j.Logger;

import java.util.*;

public class GatherDataScourceServiceImpl extends BasicServiceImpl<String>
		implements IGatherDataScourceService {
	private static final Logger logger = Logger
			.getLogger(GatherDataScourceServiceImpl.class);

	IGatherDataScourceRepository repository;

	private IMetaDataBaseService metaDataService;

	public IMetaDataBaseService getMetaDataService() {
		return metaDataService;
	}

	public void setMetaDataService(IMetaDataBaseService metaDataService) {
		this.metaDataService = metaDataService;
	}

	public IGatherDataScourceRepository getRepository() {
		return repository;
	}

	public void setRepository(IGatherDataScourceRepository repository) {
		this.repository = repository;
	}

	@Override
	public IResponse getByScope(IContext arg0) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends IModel<String>> getModelClass() {
		// TODO Auto-generated method stub
		return MetaDataGatherDBSModel.class;
	}

	@Override
	public com.gilight.dep.framework.core.model.IModel<String> initModel(
			IContext<? extends IParameters> context) throws Exception {
		// TODO Auto-generated method stub
		IDEntity<String> entity = AutoCopyObj.objCopy(MdGatherDatasource.class,
				AutoCopyObj.getViewParam(context));
		if (entity.getId() == null || entity.getId().equals("")) {
			entity.setId(UUID.randomUUID().toString());
		}
		IModel<String> dataModel = (IModel) getCacheManager().getObject(
				entity.getId(), MetaDataGatherDBSModel.class);
		IModel<String> model = this.createModel(entity.getId());
		// 设置逻辑数据
		if (model instanceof IBasicModel) {
			((IBasicModel<String>) model).setData(entity);
		}
		// 设置图形数据，此处图形数据和业务数据都在一个view里面
		if (model instanceof IViewModel) {
			IDEntity<String> view = AutoCopyObj
					.createViewEntityFromContext(context);
			((IViewModel) model).setViewData(view);
		}
		return model;
	}

	public IResponse create(IContext context) throws ServiceException {
		try {

			GatherDataSourceBasicView gdsbv = (GatherDataSourceBasicView) context
					.getParameter(ParameterKeys.ATT_VIEW);
			Map<String, String> map = gdsbv.getDbsParam();
			IModel model = initModel(context);
			if ((model instanceof IBasicModel)) {
				IContext modelContext = getDefaultContext(context);
				MdGatherDatasource mgd = (MdGatherDatasource) ((MetaDataGatherDBSModel) model)
						.getData();
				String mgdid = mgd.getId();
				createParam(map, mgdid);
				((MetaDataGatherDBSModel) model).create(modelContext);
			}
			context.getResponse().setResult(
					ResultFactory.getInstance().createSuccessModelAndView(
							"创建数据源成功!", model.getKey()));
			return context.getResponse();
		} catch (ModelException exception) {
			exception.printStackTrace();
			logger.error("创建数据源失败", exception);
			throw new ServiceException("创建数据源失败!", exception);
		} catch (Exception exception) {
			exception.printStackTrace();
			logger.error("创建数据源失败", exception);
			throw new ServiceException("创建数据源失败!", exception);
		}
	}

	private void createParam(Map<String, String> map, String id)
			throws ServiceException {
		// repository.c
		// DBSParam.params
		try {
			for (String param : DBSParam.params) {
				String val = map.get(param);
				MdGatherDatasourceParam mgdp = new MdGatherDatasourceParam();
				mgdp.setDbsId(id);
				mgdp.setId(UUIDGenerator.getUUID());
				mgdp.setParamKey(param);
				mgdp.setParamValue(val);
				repository.create(mgdp);
			}
		} catch (RepositoryException exception) {
			// TODO Auto-generated catch block
			exception.printStackTrace();
			logger.error("创建数据源失败", exception);
			throw new ServiceException("创建数据源失败!", exception);
		}
	}

	private void deleteParam(String id) throws ServiceException {
		// repository.c
		// DBSParam.params
		try {
			repository.delete("dbsId", id, MdGatherDatasourceParam.class);

		} catch (RepositoryException exception) {
			// TODO Auto-generated catch block
			exception.printStackTrace();
			logger.error("创建数据源失败", exception);
			throw new ServiceException("创建数据源失败!", exception);
		}
	}

	public IResponse delete(IContext context) throws ServiceException {
		try {

			IDParameters idp = (IDParameters) context.getParameters();
			String id = idp.getId();
			GatherDataSourceBasicView gdsbv = new GatherDataSourceBasicView();
			gdsbv.setId(id);
			IContext icontext = ContextFactoryImpl.getInstance()
					.createContextWithView(gdsbv);

			IModel model = initModel(icontext);

			if ((model instanceof IBasicModel)) {
				IContext modelContext = getDefaultContext(icontext);
				MdGatherDatasource mgd = (MdGatherDatasource) ((MetaDataGatherDBSModel) model)
						.getData();
				deleteParam(mgd.getId());
				((MetaDataGatherDBSModel) model).delete(modelContext);

			}
			context.getResponse().setResult(
					ResultFactory.getInstance().createSuccessModelAndView(
							"删除数据源成功!", null));
			return context.getResponse();
		} catch (ModelException exception) {
			exception.printStackTrace();
			logger.error("删除数据源失败", exception);
			throw new ServiceException("删除数据源失败!", exception);
		} catch (Exception exception) {
			exception.printStackTrace();
			logger.error("删除数据源失败", exception);
			throw new ServiceException("删除数据源失败!", exception);
		}
	}

	public IResponse update(IContext context) throws ServiceException {
		try {

			GatherDataSourceBasicView gdsbv = (GatherDataSourceBasicView) context
					.getParameter(ParameterKeys.ATT_VIEW);
			Map<String, String> map = gdsbv.getDbsParam();

			IModel model = initModel(context);

			if ((model instanceof IBasicModel)) {
				IContext modelContext = getDefaultContext(context);
				MdGatherDatasource mgd = (MdGatherDatasource) ((MetaDataGatherDBSModel) model)
						.getData();
				deleteParam(mgd.getId());
				createParam(map, mgd.getId());
				((MetaDataGatherDBSModel) model).update(modelContext);
			}
			context.getResponse().setResult(
					ResultFactory.getInstance().createSuccessModelAndView(
							"更新数据源成功!", null));
			return context.getResponse();
		} catch (ModelException exception) {
			exception.printStackTrace();
			logger.error("更新数据源失败", exception);
			throw new ServiceException("更新数据源失败!", exception);
		} catch (Exception exception) {
			exception.printStackTrace();
			logger.error("更新数据源失败", exception);
			throw new ServiceException("更新数据源失败!", exception);
		}
	}

	public IResponse getById(IContext context) throws ServiceException {
		try {

			IDParameters idp = (IDParameters) context.getParameters();
			String id = idp.getId();
			GatherDataSourceBasicView gdsbv = new GatherDataSourceBasicView();
			gdsbv.setId(id);
			IContext icontext = ContextFactoryImpl.getInstance()
					.createContextWithView(gdsbv);

			IModel model = initModel(icontext);

			if ((model instanceof IBasicModel)) {
				IContext modelContext = getDefaultContext(icontext);
				((IBasicModel) model).get(modelContext);
			}
			context.getResponse().setResult(
					ResultFactory.getInstance().createSuccessModelAndView(
							"创建数据源成功!", null));
			return context.getResponse();
		} catch (ModelException exception) {
			throw new ServiceException("更新失败!", exception);
		} catch (Exception exception) {
			throw new ServiceException("更新失败!", exception);
		}
	}

	@SuppressWarnings("rawtypes")
	@Override
	public IResponse getGatherDBByAdaptor(IContext context)
			throws ServiceException {
		try {// TODO Auto-generated method stub
			String adaptorId = (String) context
					.getParameter(ParameterKeys.ATT_ID);
			GatherDatasourceScope scope = new GatherDatasourceScope();
			scope.setAdapter(adaptorId);
			IContext scopeContext = ContextFactoryImpl.getInstance()
					.createContextWithParams(context, scope);
			scopeContext.getResponse().regiestResultHandler(
					new IResultHandler() {
						@SuppressWarnings("unchecked")
						@Override
						public IResult handle(IContext context, IResult result)
								throws Exception {
							List<IEntity> list = (List<IEntity>) result
									.getResult();
							List<GatherDSBaseView> views = new ArrayList<GatherDSBaseView>();
							if (list != null) {
								for (IEntity iEntity : list) {
									MdGatherDatasource entity = (MdGatherDatasource) iEntity;
									GatherDSBaseView view = (GatherDSBaseView) SpringBeansUtils
											.copyProperties(
													GatherDSBaseView.class,
													entity);
									List dbSourceJobs = getGatherJobByDBSId(view
											.getId());
									List<GatherJobBasicView> jobList = SpringBeansUtils
											.copyPropertiesForList(
													GatherJobBasicView.class,
													dbSourceJobs, null);
									view.setJobList(jobList);
									MetaDataView metadata = getMetaData(view
											.getDataPath());
									if (metadata != null) {
										view.setDataPathName(metadata
												.getMdName());
									}
									Map param = getDataSourceParam(view.getId());
									view.setDbsParam(param);
									views.add(view);
								}
							}
							return ResultFactory.getInstance()
									.createSuccessResult(views);
						}
					});
			this.getRepository().getByScope(scopeContext);
			return context.getResponse();
		} catch (ModelException exception) {
			logger.error(exception);
			throw new ServiceException("查询失败!", exception);
		} catch (Exception exception) {
			logger.error(exception);
			throw new ServiceException("查询失败!", exception);
		}
	}

	private Map getDataSourceParam(String id) {
		Map para = new HashMap();
		try {
			GatherDatasourceParamScope scope = new GatherDatasourceParamScope();
			scope.setDbsId(id);
			IContext context = ContextFactoryImpl.getInstance()
					.createContextWithParams(scope);
			this.getRepository().getByScope(context);
			List result = (List) context.getResponse().getBlockedResultObject();
			if (result != null) {
				for (int i = 0, j = result.size(); i < j; i++) {
					MdGatherDatasourceParam dbp = (MdGatherDatasourceParam) result
							.get(i);
					para.put(dbp.getParamKey(), dbp.getParamValue());
				}
			}
		} catch (GilightException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return para;
	}

	private MetaDataView getMetaData(String dataPath) {
		// TODO Auto-generated method stub
		try {
			if (dataPath != null) {
				IContext context = ContextFactoryImpl.getInstance()
						.createContextWithID(dataPath);
				this.getMetaDataService().getById(context);
				return (MetaDataView) context.getResponse()
						.getBlockedResultObject();
			}
		} catch (GilightException e) {
			e.printStackTrace();
		}
		return null;
	}

	private List getGatherJobByDBSId(String dbsId) throws ServiceException {
		try {// TODO Auto-generated method stub
			GatherJobScope scope = new GatherJobScope();
			scope.setDatasource(dbsId);
			IContext scopeContext = ContextFactoryImpl.getInstance()
					.createContextWithParams(scope);
			this.getRepository().getByScope(scopeContext);
			List result = (List) scopeContext.getResponse().getBlockedResult()
					.getResult();
			return result;
		} catch (ModelException exception) {
			logger.error(exception);
			throw new ServiceException("查询失败!", exception);
		} catch (Exception exception) {
			logger.error(exception);
			throw new ServiceException("查询失败!", exception);
		}
	}

	@SuppressWarnings("rawtypes")
	@Override
	public IResponse getDBSchames(IContext paramIContext)
			throws ServiceException {
		try {
			DBConnectionInfo gdsbv = (DBConnectionInfo) paramIContext
					.getParameter(ParameterKeys.ATT_VIEW);
			DBConnParam dbcp = new DBConnParam();
			dbcp.setDbtype(gdsbv.getDbType());
			dbcp.setDriver(gdsbv.getDriver());
			dbcp.setPwd(gdsbv.getPassword());
			dbcp.setUrl(gdsbv.getUrl());
			dbcp.setUser(gdsbv.getUserName());

			List<String> names = DBUtils.getSchemaNames(dbcp);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessModelAndView(
							"查询Schema成功!", names));
			return paramIContext.getResponse();
		} catch (GilightException e) {
			logger.error(e);
			throw new ServiceException("获取schema失败!", e);
		} catch (Exception e) {
			logger.error(e);
			throw new ServiceException("获取schema失败!", e);
		}
	}
}
