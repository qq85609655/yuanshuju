/**   
* @Title: MetadataControllerTest.java  
* @Description: 模拟控制器构造返回数据 
* @author YHY   
* @date 2015年7月22日 上午10:29:11
* @Copyright Henan Province Jinghua Sci & Tech Co.. Ltd
* @version V1.0   
*/
package com.gilight.dep.metadata.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gilight.dep.metadata.web.request.MetadataRequestData;
import com.gilight.dep.metadata.web.response.ResponseResult;
import com.gilight.dep.metadata.web.response.ResultCode;


@RequestMapping("/metadata")
public class MetadataControllerSimulate {

	/**
	 * 根据视图Id获取元数据（只获取第一层元数据信息）
	* <p><br>
	* @param metadataRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-14 下午6:06:11
	* @version V1.0
	 */
	@RequestMapping(value = "/getByViewId", method = RequestMethod.GET)
	public @ResponseBody
	Object getByViewId(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		System.out.println(metadataRequestData.getViewId());
		String viewId = metadataRequestData.getViewId();
		//测试数据
		List<Map> list = new ArrayList<Map>();
		for(int i=1;i<3;i++){
			Map map = new HashMap();
			map.put("id", Integer.parseInt(viewId+(i+"")));
			map.put("text", "元数据_"+Integer.parseInt(viewId+(i+"")));
			map.put("leaf", true);
			map.put("expanded", false);
			map.put("type", 2);
			list.add(map);
		}
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",list);
	}

	/**
	 * 根据元数据Id获取 元数据及子元数据详情
	* <p><br>
	* @param metadataRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-14 下午6:06:11
	* @version V1.0
	 */
	@RequestMapping(value = "/getDetailAndSubById", method = RequestMethod.GET)
	public @ResponseBody
	Object getDetailAndSubById(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		String id = metadataRequestData.getMetadataId();
		
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",null);
	}
	
	/**
	 * 创建元数据
	* <p><br>
	* @param metadataRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-20 下午3:18:31
	* @version V1.0
	 */
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public @ResponseBody
	Object create(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",null);
	}
	
	/**
	 * 编辑元数据
	* <p><br>
	* @param metadataRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-20 下午3:18:31
	* @version V1.0
	 */
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public @ResponseBody
	Object edit(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",null);
	}
	
	/**
	 * 删除元数据
	* <p><br>
	* @param metadataRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-20 下午3:18:31
	* @version V1.0
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public @ResponseBody
	Object delete(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",null);
	}
	
	/**
	 * 发布元数据
	* <p><br>
	* @param metadataRequestData
	* @return
	* @throws Exception  
	* @author Administrator 
	* @date 2015-7-20 下午3:18:31
	* @version V1.0
	 */
	@RequestMapping(value = "/pub", method = RequestMethod.GET)
	public @ResponseBody
	Object pub(@ModelAttribute MetadataRequestData metadataRequestData)
			throws Exception {
		return new ResponseResult(ResultCode.RESULT_CODE_SUCCESS, "获取成功",null);
	}
}
