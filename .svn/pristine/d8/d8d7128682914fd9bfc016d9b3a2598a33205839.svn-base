package com.gilight.dep.metadata.service.impl;

import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.IParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.exception.RepositoryException;
import com.gilight.dep.framework.core.exception.ServiceException;
import com.gilight.dep.framework.core.model.IBasicModel;
import com.gilight.dep.framework.core.model.IModel;
import com.gilight.dep.framework.core.model.IViewModel;
import com.gilight.dep.framework.core.model.entity.IDEntity;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.framework.core.service.impl.BasicServiceImpl;
import com.gilight.dep.framework.util.common.UUIDGenerator;
import com.gilight.dep.metadata.entity.MdDbBackup;
import com.gilight.dep.metadata.entity.MdMetadata;
import com.gilight.dep.metadata.enums.DbBakResultStatus;
import com.gilight.dep.metadata.repository.IMetaDataBaseRepository;
import com.gilight.dep.metadata.service.IMetaDataDbBackupService;
import com.gilight.dep.metadata.util.AutoCopyObj;
import com.gilight.dep.metadata.util.CustomizedPropertySpringConfigurer;
import com.gilight.dep.metadata.util.MetaDateUtils;
import com.gilight.dep.metadata.util.OracleDatabaseBackup;
import com.gilight.dep.metadata.view.MetaDbBakView;
import com.gilight.dep.metamodel.service.IMetaModelQueryService;
import org.apache.log4j.Logger;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class MetaDataDbBackupServiceImpl extends BasicServiceImpl<String> implements
		IMetaDataDbBackupService {
	private static final Logger logger = Logger
			.getLogger(MetaDataDbBackupServiceImpl.class);

	private IMetaDataBaseRepository metaDataBaseRepository = null;

	private IMetaModelQueryService metaModelQueryService = null;

	public IMetaModelQueryService getMetaModelQueryService() {
		return metaModelQueryService;
	}

	public void setMetaModelQueryService(
			IMetaModelQueryService metaModelQueryService) {
		this.metaModelQueryService = metaModelQueryService;
	}

	public IMetaDataBaseRepository getMetaDataBaseRepository() {
		return metaDataBaseRepository;
	}

	public void setMetaDataBaseRepository(
			IMetaDataBaseRepository metaDataBaseRepository) {
		this.metaDataBaseRepository = metaDataBaseRepository;
	}

	// @Override
	// public IResponse getByScope(IContext paramIContext) throws
	// ServiceException {
	// // TODO Auto-generated method stub
	// try {
	//
	// MetaHbiernateScope scope = (MetaHbiernateScope) paramIContext
	// .getParameters();
	// IContext context;
	//
	// // MdView mv = new MdView();
	// // scope.setEntiey(mv);
	// MetaDataBasicView mdv = (MetaDataBasicView) scope.getView();
	// MdMetadata md = AutoCopyObj.objCopy(MdMetadata.class, mdv);
	// scope.setEntiey(md);
	// scope.autoSetWhere(md);
	// context = ContextFactoryImpl.getInstance().createContextWithParams(
	// scope);
	// IResponse res = metaDataBaseRepository.getByScope(context);
	// ResultImpl rs = (ResultImpl) res.getBlockedResult();
	// // IContext ic= res.getResult();
	// List<IEntity> list = (List<IEntity>) rs.getResult();
	// // List<IEntity> list=(List<IEntity>) ic.getParameters();
	// List<MetaDataBasicView> mmvlist = new ArrayList<MetaDataBasicView>();
	// if (list != null) {
	// for (IEntity iEntity : list) {
	// MdMetadata mme = (MdMetadata) iEntity;
	// MetaDataBasicView mmv = AutoCopyObj.objCopy(
	// MetaDataBasicView.class, mme);
	// mmvlist.add(mmv);
	// }
	// }
	//
	// res.setResult(ResultFactory.getInstance().createSuccessResult(
	// mmvlist));
	// return res;
	//
	// } catch (GilightException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// logger.error("查询元数据出现错误!", e);
	// throw new ServiceException("查询元数据出现错误!");
	// } catch (Exception e) {
	// // TODO Auto-generated catch block
	// logger.error("查询元数据出现错误!", e);
	// e.printStackTrace();
	// throw new ServiceException("查询元数据出现错误!");
	// }
	// }

	@Override
	public com.gilight.dep.framework.core.model.IModel<String> initModel(
			IContext<? extends IParameters> context) throws Exception {
		// TODO Auto-generated method stub
		// MmViewFolder
		// IDEntity<String> entity = this.createEntityFromContext(context);

		IDEntity<String> entity = AutoCopyObj.objCopy(MdMetadata.class,
				AutoCopyObj.getViewParam(context));
		// entity.setId(UUID.randomUUID().toString());
		IModel<String> dataModel = (IModel) getCacheManager().getObject(
				entity.getId(), getModelClass());
		IModel<String> model = this.createModel(entity.getId());
		// 设置逻辑数据
		if (model instanceof IBasicModel) {
			((IBasicModel<String>) model).setData(entity);
		}
		// 设置图形数据，此处图形数据和业务数据都在一个view里面
		if (model instanceof IViewModel) {
			IDEntity<String> view = AutoCopyObj
					.createViewEntityFromContext(context);
			((IViewModel) model).setViewData(view);
		}
		return model;

	}

	@Override
	public Class<? extends IModel<String>> getModelClass() {
		return null;
	}




	/**
	 * 获取映射关系元模型
	 */
	public void findMmByName(String mmName){
		//metaDataBaseRepository.find

	}

	@Override
	public IResponse getByScope(IContext iContext) throws ServiceException {
		return null;
	}

	@Override
	public void backupDb() throws Exception {
		String path=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.backuppath");
		int radomInt = new Random().nextInt(999999999);
		String userName = (String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.username");
		String password=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.password");
		String sid=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.sid");

		MdDbBackup mdDbBackup = new MdDbBackup();
		mdDbBackup.setId(UUIDGenerator.getUUID());

		mdDbBackup.setStartTime(MetaDateUtils.getDefaultUpdateDate());
		mdDbBackup.setFileName(radomInt+".dmp");
		mdDbBackup.setResult(DbBakResultStatus.RUNTIME+"");
		this.getMetaDataBaseRepository().create(mdDbBackup);
		//String pathfile=path+"/"+radomInt;
		if (OracleDatabaseBackup.exportDatabaseTool(userName,password,sid,path,radomInt+"")){
			logger.warn("数据库备份成功");
			mdDbBackup.setResult(DbBakResultStatus.SUCCEED+"");
		}else {
			logger.error("数据库备份失败");
			mdDbBackup.setResult(DbBakResultStatus.FAILED+"");
		}
		mdDbBackup.setEndTime(MetaDateUtils.getDefaultUpdateDate());

		this.getMetaDataBaseRepository().update(mdDbBackup);
	}

	@Override
	public IResponse queryDbBackup(IContext context) throws Exception {
		MdDbBackup mdDbBackup = new MdDbBackup();
		List<IEntity> list=this.getMetaDataBaseRepository().queryDbBak();
		List<MetaDbBakView> mmvlist = new ArrayList<MetaDbBakView>();
		for (IEntity iEntity : list) {
			MdDbBackup mme = (MdDbBackup) iEntity;
			MetaDbBakView mmv = AutoCopyObj.objCopy(
					MetaDbBakView.class, mme);

			mmvlist.add(mmv);
		}

		context.getResponse().setResult(
				ResultFactory.getInstance().createSuccessModelAndView(
						"获取成功!", mmvlist));
		return context.getResponse();
	}


    @Override
    /**
     * 删除备份
     * @param context
     * @return
     */
    public IResponse delDbBackup(IContext context){

        try {
            String id= (String) context.getParameter("id");
            MdDbBackup mdDbBackup = new MdDbBackup();
            mdDbBackup.setId(id);

            List<IEntity> list=this.getMetaDataBaseRepository().queryDbBak(mdDbBackup);
            if (list==null||list.size()==0){
                context.getResponse().setResult(
                        ResultFactory.getInstance().createSuccessModelAndView(
                                "删除备份成功!", null));
            }
            mdDbBackup = (MdDbBackup) list.get(0);
            String path=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.backuppath");
            String fileName=mdDbBackup.getFileName();
            String filePath=path+"/"+fileName;
            File file = new File(filePath);
            file.delete();

            this.getMetaDataBaseRepository().delete(mdDbBackup);
            context.getResponse().setResult(
                    ResultFactory.getInstance().createSuccessModelAndView(
                            "删除备份成功!", null));
        } catch (RepositoryException e) {
            e.printStackTrace();
            context.getResponse().setResult(
                    ResultFactory.getInstance().createSuccessModelAndView(
                            "删除备份失败!", null));
        }

        return context.getResponse();
    }

	/**
	 * 恢复数据库
	 * @param id 备份id
	 * @throws Exception
	 */
    @Override
    public void recoverDb(String id) throws Exception {
        String path=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.backuppath");
        int radomInt = new Random().nextInt(999999999);
        String userName = (String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.username");
        String password=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.password");
        String sid=(String) CustomizedPropertySpringConfigurer.getContextProperty("jdbc.sid");

        MdDbBackup mdDbBackup = new MdDbBackup();
        mdDbBackup.setId(id);
        List<IEntity> list=this.getMetaDataBaseRepository().queryDbBak(mdDbBackup);
        if (list==null||list.size()==0){
            return;
        }
        mdDbBackup = (MdDbBackup) list.get(0);
        String fileName=mdDbBackup.getFileName();
        if (OracleDatabaseBackup.importDatabaseTool(userName,password,sid,path,fileName)){
            logger.warn("数据库恢复成功");
            mdDbBackup.setResult(DbBakResultStatus.SUCCEED+"");
        }else {
            logger.error("数据库恢复失败");
            mdDbBackup.setResult(DbBakResultStatus.FAILED+"");
        }

    }

    public class StartRecover implements Runnable{

        @Override
        public void run() {
            try {
                backupDb();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

	public class StartBak implements Runnable{

		@Override
		public void run() {
			try {
				backupDb();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	@Override
	public void startDbbak(){
		(new Thread(new StartBak())).start();
		System.out.println("开始备份");
	}

	public static Logger getLogger() {
		return logger;
	}
}
