package com.gilight.dep.metadata.repository.impl;

import com.gilight.dep.framework.core.context.base.IContext;
import com.gilight.dep.framework.core.context.request.parameter.ParameterKeys;
import com.gilight.dep.framework.core.context.request.parameter.impl.IDParameters;
import com.gilight.dep.framework.core.context.response.IResponse;
import com.gilight.dep.framework.core.context.response.result.factory.ResultFactory;
import com.gilight.dep.framework.core.exception.DaoException;
import com.gilight.dep.framework.core.exception.ModelException;
import com.gilight.dep.framework.core.exception.RepositoryException;
import com.gilight.dep.framework.core.model.IBasicModel;
import com.gilight.dep.framework.core.model.entity.IEntity;
import com.gilight.dep.framework.util.common.UUIDGenerator;
import com.gilight.dep.metadata.dao.IAnalyseExcuteDao;
import com.gilight.dep.metadata.enmu.EnumRelation;
import com.gilight.dep.metadata.entity.*;
import com.gilight.dep.metadata.enums.MappDireStatus;
import com.gilight.dep.metadata.enums.MdAnalyseResultParam;
import com.gilight.dep.metadata.repository.IAnalyseExcuteRepository;
import com.gilight.dep.metadata.util.ListUtil;
import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class AnalyseExcuteRepositoryImpl extends MetaDataRepositoryImpl implements IAnalyseExcuteRepository{

	private static final Logger logger = Logger
			.getLogger(AnalyseExcuteRepositoryImpl.class);

	private IAnalyseExcuteDao analyseExcuteDao;
	
	
	
	public IAnalyseExcuteDao getAnalyseExcuteDao() {
		return analyseExcuteDao;
	}

	public void setAnalyseExcuteDao(IAnalyseExcuteDao analyseExcuteDao) {
		this.analyseExcuteDao = analyseExcuteDao;
	}

	public AnalyseExcuteRepositoryImpl() {
		// TODO Auto-generated constructor stub
	}


	@Override
	public IResponse create(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IContext<IBasicModel> cxt = paramIContext;
			IBasicModel model = (IBasicModel) cxt.getParameter(ParameterKeys.ATT_MODEL);
//				Session session = (Session) cxt.getParameter("session");
			analyseExcuteDao.save(model.getData()/*,session*/);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessResult(null));
			return paramIContext.getResponse();
			} catch (DaoException | ModelException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				new RepositoryException("创建元模型失败!-dao");
			}
			
		return paramIContext.getResponse();
	}

	@Override
	public IResponse update(IContext paramIContext) throws RepositoryException {
		try {
			IContext<IBasicModel> cxt = paramIContext;
			IBasicModel model = (IBasicModel) cxt.getParameter(ParameterKeys.ATT_MODEL);
//			Session session = (Session) cxt.getParameter("session");
			analyseExcuteDao.update(model.getData()/*,session*/);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessResult(null));
			return paramIContext.getResponse();
		} catch (DaoException | ModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("更新元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}

	@Override
	public IResponse delete(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IContext<IBasicModel> cxt = paramIContext;
			IBasicModel model = (IBasicModel) cxt.getParameter(ParameterKeys.ATT_MODEL);
//			Session session = (Session) cxt.getParameter("session");
			analyseExcuteDao.delete(model.getData()/*,session*/);
			paramIContext.getResponse().setResult(
					ResultFactory.getInstance().createSuccessResult(null));
			return paramIContext.getResponse();
		} catch (DaoException | ModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("更新元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}



	@Override
	public IResponse getById(IContext paramIContext) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			IDParameters idp = (IDParameters) paramIContext.getParameters();
			//EntityParameters mme=(MmMetamodel)entityParameters.getEntity();
			String id = idp.getId();
			//metaModelBasicDao.getById(mme.getId(),MmMetamodel.class);
			MmMetamodel mme=(MmMetamodel) analyseExcuteDao.findById(id,MmMetamodel.class);
			paramIContext.getResponse().setResult(ResultFactory.getInstance().createSuccessResult(mme));
			
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			new RepositoryException("查询元模型失败!-dao");
		}
		
		return paramIContext.getResponse();
	}

	@Override
	public IResponse getByScope(IContext paramIContext)
			throws RepositoryException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public MmMetamodel getModelByid(String id) throws RepositoryException{
		// TODO Auto-generated method stub
		try {
			MmMetamodel mm=(MmMetamodel)analyseExcuteDao.findById(id, MmMetamodel.class);
			return mm;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	
	}

	@Override
	public MmMetamodel getModelByCode(String code) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<IEntity> mmlist=analyseExcuteDao.findByProperty("mmCode",code, MmMetamodel.class);
			if(mmlist==null||mmlist.size()==0){
				throw new RepositoryException("没有相应元模型=="+code);
			}
			MmMetamodel mm = (MmMetamodel) mmlist.get(0);
			return mm;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
		
	}

	@Override
	public List<MmInherit> getMmInheritByfromid(String fromid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmInherit> milist = new ArrayList<MmInherit>();
			List<IEntity> list=analyseExcuteDao.findByProperty("parentId", fromid, MmInherit.class);
			for (IEntity iEntity : list) {
				MmInherit mi = (MmInherit)iEntity;
				milist.add(mi);
			}
			return milist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	}

	@Override
	public List<MmComposition> getMmCompositionByfromid(String fromid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmComposition> milist = new ArrayList<MmComposition>();
			List<IEntity> list=analyseExcuteDao.findByProperty("fromMmId", fromid, MmDependency.class);
			for (IEntity iEntity : list) {
				MmComposition mi = (MmComposition)iEntity;
				milist.add(mi);
			}
			return milist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	}

	@Override
	public List<MmDependency> getMmDependencyByfromid(String fromid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmDependency> milist = new ArrayList<MmDependency>();
			List<IEntity> list=analyseExcuteDao.findByProperty("fromMmId", fromid, MmDependency.class);
			for (IEntity iEntity : list) {
				MmDependency mi = (MmDependency)iEntity;
				milist.add(mi);
			}
			return milist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
	}

	@Override
	public MmMetamodel getMetaModel(String mdid) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			MdMetadata md = (MdMetadata) analyseExcuteDao.findById(mdid, MdMetadata.class);
			String mmid=md.getMmId();
			MmMetamodel mm=(MmMetamodel) analyseExcuteDao.findById(mmid, MmMetamodel.class);
			return mm;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元模型失败");
		}
		
	}

	@Override
	public List<MdDependency> getMetaDataDepe(String mdid) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findByProperty("fromMdId", mdid, MdDependency.class);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
		
	}

	@Override
	public List<MdComposition> getMetaDataComp(String mdid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdComposition> complist = new ArrayList<MdComposition>();
			List<IEntity> mdcplist = analyseExcuteDao.findByProperty("fromMdId", mdid, MdComposition.class);
			for (IEntity iEntity : mdcplist) {
				MdComposition mdcp = (MdComposition)iEntity;
				complist.add(mdcp);
			}
			return complist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdMetadata> getMetaDataByMmid(String mmid)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdMetadata> mdlist = new ArrayList<MdMetadata>();
			List<IEntity> list = analyseExcuteDao.findByProperty("mmId", mmid, MdMetadata.class);
			for (IEntity iEntity : list) {
				MdMetadata md = (MdMetadata)iEntity;
				mdlist.add(md);
			}
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdMetadata> getMetaDataByMmid(String mmid,List<String> ids)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdMetadata> mdlist = new ArrayList<MdMetadata>();
			List<IEntity> list = analyseExcuteDao.findMetaDataByIdList(ids,mmid);
			
			for (IEntity iEntity : list) {
				MdMetadata md = (MdMetadata)iEntity;
				mdlist.add(md);
			}
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	public List<MmDependency> getMetaModelDepeByName(String name)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MmDependency> depelist = new ArrayList<MmDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findByProperty("name", name, MmDependency.class);
			for (IEntity iEntity : mddepelist) {
				MmDependency mddepe = (MmDependency)iEntity;
				depelist.add(mddepe);
			}
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdDependency> findMetaDataDepeByIdList(List<String> idlist,
			List<String> toidlist)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findMetaDataDepeByIdList(idlist, toidlist);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	@Override
	public List<MdDependency> getMetaDataDepeById(List<String> mmids)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			List<IEntity> mddepelist = analyseExcuteDao.findByIdList(mmids,MdDependency.class);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	
	}
	@Override
	public List<MdDependency> getMetaDataDepeByMmId(List<String> mmids)
			throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			List<MdDependency> depelist = new ArrayList<MdDependency>();
			//List<IEntity> mddepelist = analyseExcuteDao.findByIdList(mmids,MdDependency.class);
			List<IEntity> mddepelist = analyseExcuteDao.findByParamList("mmDepId", mmids, MdDependency.class);
			for (IEntity iEntity : mddepelist) {
				MdDependency mddepe = (MdDependency)iEntity;
				depelist.add(mddepe);
			}
			
			return depelist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	
	}
	@Override
	public List<MdDependency> getMetaDataTargetDepe(String sourceid,
			String depeid) throws RepositoryException {
		// TODO Auto-generated method stub
		
		try {
			//List<MdDependency> 
			
			String hql="from "+MdDependency.class.getName()+" where fromMdId='"+sourceid+"' and mmDepId='"+depeid+"'";
			List<IEntity> list=analyseExcuteDao.findByHQL(hql);
			MdDependency[] mds= (MdDependency[]) list.toArray(new MdDependency[list.size()]);
			List<MdDependency> mdlist=new ArrayList<MdDependency>();
			for (MdDependency mdDependency : mds) {
				mdlist.add(mdDependency);
			}
			
			//mdlist.addAll(mds);
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
		
	}

	@Override
	public MdMetadata getMetaDataByMdid(String mdid) throws RepositoryException {
		// TODO Auto-generated method stub
		MdMetadata md;
		try {
			md = (MdMetadata) analyseExcuteDao.findById(mdid, MdMetadata.class);
			return md;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
		
	}

	@Override
	public void resultDel() throws RepositoryException {
		// TODO Auto-generated method stub

		try {
			String hql="delete "+MdAnalyseResult.class.getName()+" s where s.status="+MdAnalyseResultParam.yes;
			analyseExcuteDao.executehql(hql);
			analyseExcuteDao.flush();
			/*hql="update "+MdAnalyseResult.class.getName()+" s set s.status="+MdAnalyseResultParam.yes +" where s.status="+MdAnalyseResultParam.no ;
			analyseExcuteDao.executehql(hql);*/
			//analyseExcuteDao.flush();
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void resultStatus() throws RepositoryException {
		// TODO Auto-generated method stub

		try {
			/*String hql="delete "+MdAnalyseResult.class.getName()+" s where s.status="+MdAnalyseResultParam.yes;
			analyseExcuteDao.executehql(hql);
			analyseExcuteDao.flush();*/
			String hql="update "+MdAnalyseResult.class.getName()+" s set s.status="+MdAnalyseResultParam.yes +" where s.status="+MdAnalyseResultParam.no ;
			analyseExcuteDao.executehql(hql);
			//analyseExcuteDao.flush();
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public List<MdDependency> getMetaDataTargetDepeByToid(String toid,
			String depeid) throws RepositoryException {
		// TODO Auto-generated method stub
		try {
			//List<MdDependency> 
			String hql="from "+MdDependency.class.getName()+" where toMdId='"+toid+"' and mmDepId='"+depeid+"'";
			List<IEntity> list=analyseExcuteDao.findByHQL(hql);
			MdDependency[] mds= (MdDependency[]) list.toArray(new MdDependency[list.size()]);
			List<MdDependency> mdlist=new ArrayList<MdDependency>();
			for (MdDependency mdDependency : mds) {
				mdlist.add(mdDependency);
			}
			
			//mdlist.addAll(mds);
			return mdlist;
		} catch (DaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RepositoryException("查询元数据失败");
		}
	}

	public class DepeMapp{
		private String source;
		private String target;

		public String getSource() {
			return source;
		}

		public void setSource(String source) {
			this.source = source;
		}

		public String getTarget() {
			return target;
		}

		public void setTarget(String target) {
			this.target = target;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			DepeMapp depeMapp = (DepeMapp) o;
			return Objects.equals(source, depeMapp.source) &&
					Objects.equals(target, depeMapp.target);
		}

		@Override
		public int hashCode() {
			return Objects.hash(source, target);
		}

		@Override
		public String toString() {
			return "DepeMapp{" +
					"source='" + source + '\'' +
					", target='" + target + '\'' +
					'}';
		}
	}
	@Override
	/**
	 * 清理依赖表
	 */
	public void clearDepe(){
		try {
			MdDependency mdDependency = new  MdDependency();
			mdDependency.setUpdateDate(null);
			List<MdDependency> list= this.getAnalyseExcuteDao().findByEntity(mdDependency,MdDependency.class);
			if (ListUtil.isNotEmpty(list)){
                for (MdDependency dependency : list) {
                    String fromId=dependency.getFromMdId();
                    String toId=dependency.getToMdId();
                    MdMetadata mdMetadata =new MdMetadata();
                    mdMetadata.setUpdateDate(null);
                    mdMetadata.setId(fromId);
                    List<MdMetadata> mdList=this.getAnalyseExcuteDao().findByEntity(mdMetadata,MdMetadata.class);
                    if (ListUtil.isEmpty(mdList)){
                        analyseExcuteDao.delete(dependency);
                        continue;
                    }
					mdMetadata.setId(toId);
					mdList=this.getAnalyseExcuteDao().findByEntity(mdMetadata,MdMetadata.class);
					if (ListUtil.isEmpty(mdList)){
						analyseExcuteDao.delete(dependency);
						continue;
					}

                }
            }
		} catch (DaoException e) {
			logger.error("清理依赖表错误",e);
			e.printStackTrace();
		}

	}

	@Override
	/**
	 * 查询所有映射
	 */
	public List<DepeMapp> findAllMappTarget() throws RepositoryException{
		List<DepeMapp> depeMappList = new ArrayList<DepeMapp>();
		try {
			//List<DepeMapp> depeMappList = new ArrayList<DepeMapp>();
			List<MdDependency> mdDependencyList = new ArrayList<MdDependency>();
			String hql="from "+MmDependency.class.getName()+" where mappDire='"+ MappDireStatus.MAPPDIRETARGET+"'";
			List<IEntity> mmDepeList=analyseExcuteDao.findByHQL(hql);
			//if (depeList==null||)
			for (IEntity entity:mmDepeList) {
				MmDependency mmDependency=(MmDependency)entity;
				String toMmId=mmDependency.getToMmId();
				String fromMmId=mmDependency.getFromMmId();
				String fromHql="from "+MmDependency.class.getName()+" where fromMmId='"+fromMmId+"'  and mappDire='"+ MappDireStatus.MAPPDIRESOURCE+"'";

				List<IEntity> depeList=analyseExcuteDao.findByHQL(fromHql);

				if (depeList==null||depeList.size()!=1){
					continue;
				}
				MmDependency sourceMmDependency=(MmDependency)depeList.get(0);

				DepeMapp depeMapp= new DepeMapp();
				depeMapp.setSource(sourceMmDependency.getName());
				depeMapp.setTarget(mmDependency.getName());
				depeMappList.add(depeMapp);
				//return depeMappList;
			}

		} catch (DaoException e) {
			e.printStackTrace();
		}
		return depeMappList;
	}


	/**
	 * 查询不包含notId的映射，既查询映射另一端
	 * @param fromMdId 映射元数据id
	 * @param depeMmId 映射元模型id
	 * @param notId  需要排除的元数据id
	 * @return
	 * @throws RepositoryException
	 */
	public List<MdMetadata> findByNotMdid(String fromMdId, String depeMmId,String notId)throws RepositoryException{
		List<MdMetadata> mdMetadataList = new ArrayList<MdMetadata>();
		try {

			String hql="from "+MdDependency.class.getName()+" where fromMdId='"+fromMdId+"' and mmDepId='"+depeMmId+"' and toMdId!='"+notId+"'";
			if (depeMmId==null||"".equals(depeMmId)){
				hql="from "+MdDependency.class.getName()+" where fromMdId='"+fromMdId+"'  and toMdId!='"+notId+"'";
			}
			List<IEntity> list=analyseExcuteDao.findByHQL(hql);
			if (list==null||list.size()==0){
				return null;
			}
			for (IEntity entity:list) {
				MdDependency mdDependency=(MdDependency)entity;
				MdMetadata mdMetadata = getMetaDataByMdid(mdDependency.getToMdId());

				mdMetadataList.add(mdMetadata);
			}
			//MdDependency mdDependency = (MdDependency) list.get(0);



			return mdMetadataList;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mdMetadataList;

	}

	@Override
	public List<MdDependency> findMappDepeByMmId(String mmid){
		MdDependency mdDependency= new MdDependency();
		mdDependency.setUpdateDate(null);
		mdDependency.setMmDepId(mmid);
		//mdDependency.setIsMapp(MdRelation.TYPE_MAPPING+"");
		//mdDependency.setMappDire(dire);
		List<MdDependency> mdDependencys= analyseExcuteDao.findByEntity(mdDependency,MdDependency.class);
		return mdDependencys;
	}

	@Override
	public void updateSource(List<MdDependency> mdDependencies){
		try {
			if (ListUtil.isNotEmpty(mdDependencies)){

                for (MdDependency mdDependency : mdDependencies) {
                    if (!EnumRelation.MAPPDIRESOURCE.equals(mdDependency.getMappDire())){
                        mdDependency.setMappDire(EnumRelation.MAPPDIRESOURCE);
						mdDependency.setIsMapp(EnumRelation.TYPE_MAPPING+"");
                        analyseExcuteDao.save(mdDependency);
                    }
                }
            }
		} catch (DaoException e) {
			logger.error("更新映射依赖关系失败",e);
			e.printStackTrace();
		}


	}

	@Override
	public void updateTarget(List<MdDependency> mdDependencies){
		try {
			if (ListUtil.isNotEmpty(mdDependencies)){

				for (MdDependency mdDependency : mdDependencies) {
					if (!EnumRelation.MAPPDIRETARGET.equals(mdDependency.getMappDire())){
						mdDependency.setMappDire(EnumRelation.MAPPDIRETARGET);
						mdDependency.setIsMapp(EnumRelation.TYPE_MAPPING+"");
						analyseExcuteDao.save(mdDependency);
					}
				}
			}
		} catch (DaoException e) {
			logger.error("更新映射依赖关系失败",e);
			e.printStackTrace();
		}

	}

	//public class
	@Override
	/**
	 * 扫描映射依赖，插入关系表
	 */
	public void addRelation(){
		//if ()

		try {
			String hsql="from "+MdDependency.class.getName()+" where isMapp="+EnumRelation.TYPE_MAPPING+" and  mappDire= "+EnumRelation.MAPPDIRESOURCE;
			List<IEntity> list=analyseExcuteDao.findByHQL(hsql);
			if(ListUtil.isNotEmpty(list)){
				for (IEntity iEntity : list) {
					MdDependency mdDependency = (MdDependency) iEntity;
					MdRelation mdRelation = new MdRelation();
					mdRelation.setRelationtype(EnumRelation.TYPE_MAPPING);
					mdRelation.setSourcemdid(mdDependency.getToMdId());
					mdRelation.setSourcemdcode(mdDependency.getToMdCode());
					mdRelation.setRelationmdid(mdDependency.getFromMdId());
					mdRelation.setRelationmdcode(mdDependency.getFromMdCode());

					String targethql="from "+MdDependency.class.getName()+ " where fromMdId='"+mdRelation.getRelationmdid()+"' and isMapp="+EnumRelation.TYPE_MAPPING+" and  mappDire= "+EnumRelation.MAPPDIRETARGET;
					List<IEntity> targetlist=analyseExcuteDao.findByHQL(targethql);
					if (ListUtil.isEmpty(targetlist)){
						continue;
					}
					for (IEntity entity : targetlist) {
						MdDependency targetDependency = (MdDependency) entity;
						mdRelation.setTargetmdid(targetDependency.getToMdId());
						mdRelation.setTargetmdcode(targetDependency.getToMdCode());

						List<MdRelation> mdRelations=analyseExcuteDao.findByEntity(mdRelation,MdRelation.class);
						if (ListUtil.isEmpty(mdRelations)){
							mdRelation.setId(UUIDGenerator.getUUID());
							analyseExcuteDao.save(mdRelation);
						}
						//mdRelation.setId(UUIDGenerator.getUUID());

						//analyseExcuteDao.save(mdRelation);
					}


				}
			}
		} catch (DaoException e) {
			logger.error("关系生成失败",e);
			//logger.error();
			e.printStackTrace();
		}
		//return depeMappList;
	}
	@Override
	/**
	 *删除不存在的映射
	 * @param type 关系类型
	 */
	public void delRelation(Integer type){
		try {
			MdRelation mdRelation = new MdRelation();
			mdRelation.setRelationtype(type);
			List<MdRelation> list=analyseExcuteDao.findByEntity(mdRelation,MdRelation.class);
			if (ListUtil.isEmpty(list)){
                return;
            }
			for (MdRelation relation : list) {
                MdDependency mdDependency = new MdDependency();
                mdDependency.setIsMapp(type+"");
                mdDependency.setMappDire(EnumRelation.MAPPDIRESOURCE);
                mdDependency.setToMdId(relation.getSourcemdid());
                mdDependency.setFromMdId(relation.getRelationmdid());
				mdDependency.setUpdateDate(null);
                List<MdDependency> mdDependencyList=analyseExcuteDao.findByEntity(mdDependency,MdDependency.class);
                if (ListUtil.isEmpty(mdDependencyList)){
                    analyseExcuteDao.delete(relation);
                    continue;
                }
				mdDependency.setMappDire(EnumRelation.MAPPDIRETARGET);
				mdDependency.setToMdId(mdRelation.getTargetmdid());
				mdDependency.setFromMdId(mdRelation.getRelationmdid());
				mdDependencyList=analyseExcuteDao.findByEntity(mdDependency,MdDependency.class);
				if (ListUtil.isEmpty(mdDependencyList)){
					analyseExcuteDao.delete(relation);
					continue;
				}

            }

		} catch (DaoException e) {
			e.printStackTrace();
		}
	}
}
